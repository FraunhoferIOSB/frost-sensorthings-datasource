{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","appEvents","AlertSrv","GenericDatasourceQueryCtrl","$scope","$injector","alertSrv","scope","notificationShowTime","target","panelType","ctrl","panel","type","selectedDatastreamId","selectedDatastreamName","selectedDatastreamDirty","allDataSources","selectedSensorId","selectedSensorName","selectedSensorDirty","allSensors","selectedThingId","selectedThingName","selectedThingDirty","allThings","selectedLocationId","selectedLocationName","selectedLocationDirty","allLocations","panelCtrl","events","on","onDataReceived","bind","onDataError","set","dataList","lastQueryError","err","handleQueryCtrlError","query","refId","error","data","message","targetTypes","push","rawQuery","self","datasource","metricFindQuery","then","result","catch","sensor","_","find","text","resetDataSource","targetUrl","value","datastream","refresh","thing","location","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nimport { appEvents} from 'app/core/core';\nimport { AlertSrv} from 'app/core/core';\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector,alertSrv)  {\n\n        super($scope, $injector);\n\n        this.scope = $scope;\n        this.alertSrv = alertSrv;\n        this.notificationShowTime = 5000;\n\n        this.target.panelType = this.scope.ctrl.panel.type;\n\n        this.target.type = this.target.type || 'Sensors';\n\n        // datasource init start\n        this.target.selectedDatastreamId = this.target.selectedDatastreamId || 0;\n        this.target.selectedDatastreamName = this.target.selectedDatastreamName || 'select a datastream';\n        this.target.selectedDatastreamDirty = this.target.selectedDatastreamDirty || false;\n        this.allDataSources  = {};\n        // datasource init end\n\n        // sensor init start\n        this.target.selectedSensorId = this.target.selectedSensorId || 0;\n        this.target.selectedSensorName = this.target.selectedSensorName || 'select a sensor';\n        this.target.selectedSensorDirty = this.target.selectedSensorDirty || false;\n        this.allSensors  = {};\n        // sensor init end\n\n        // thing init start\n        this.target.selectedThingId = this.target.selectedThingId || 0;\n        this.target.selectedThingName = this.target.selectedThingName || 'select a thing';\n        this.target.selectedThingDirty = this.target.selectedThingDirty || false;\n        this.allThings  = {};\n        // thing init end\n\n\n        // Location init start\n        this.target.selectedLocationId = this.target.selectedLocationId || 0;\n        this.target.selectedLocationName = this.target.selectedLocationName || 'select a location';\n        this.target.selectedLocationDirty = this.target.selectedLocationDirty || false;\n        this.allLocations = {};\n        // Location init end\n\n        this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n        this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n        // appEvents.emit('alert-success', ['Test notification sent', '']);\n\n        if (this.target.selectedThingDirty) {\n            this.alertSrv.set(\"Thing Not Found\", this.target.selectedThingId + \" is not a valid thing name\", 'error', this.notificationShowTime);\n        }\n\n        if (this.target.selectedSensorDirty) {\n            this.alertSrv.set(\"Sensor Not Found\", this.target.selectedSensorId + \" is not a valid sensor name\", 'error', this.notificationShowTime);\n        }\n\n        if (this.target.selectedDatastreamDirty) {\n            this.alertSrv.set(\"Datastream Not Found\", this.target.selectedDatastreamName + \" is not a valid datastream name\", 'error', this.notificationShowTime);\n        }\n\n        if (this.target.selectedLocationDirty) {\n            this.alertSrv.set(\"Location Not Found\", this.target.selectedLocationId + \" is not a valid location name\", 'error', this.notificationShowTime);\n        }\n\n    }\n\n    onDataReceived(dataList) {\n        this.lastQueryError = null;\n    }\n\n    onDataError(err) {\n        this.handleQueryCtrlError(err);\n    }\n\n    handleQueryCtrlError(err) {\n        if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\n            return;\n        }\n\n        if (err.error && err.error.data && err.error.data.error) {\n            this.lastQueryError = err.error.data.error.message;\n        } else if (err.error && err.error.data) {\n            this.lastQueryError = err.error.data.message;\n        } else if (err.data && err.data.error) {\n            this.lastQueryError = err.data.error.message;\n        } else if (err.data && err.data.message) {\n            this.lastQueryError = err.data.message;\n        } else {\n            this.lastQueryError = err;\n        }\n    }\n\n    getTargetTypes() {\n        let targetTypes = ['Sensors', 'Things'];\n        if (this.target.panelType == 'table') {\n            targetTypes.push('Locations','Historical Locations');\n        }\n        return targetTypes;\n    }\n\n    showControlTypes(){\n        return (this.target.panelType != 'grafana-worldmap-panel');\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n\n    //sensor starts\n    showSensors(){\n        return this.target.type == 'Sensors' &&\n                (this.target.panelType != 'grafana-worldmap-panel');\n    }\n\n    getSensors(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Sensors\",'sensor').then((result)=>{\n            self.allSensors = result;\n            return result;\n        }).catch(this.handleQueryCtrlError.bind(this));\n    }\n\n    onSensorChange(query,selectedSensorId) {\n        let sensor = _.find(this.allSensors, { 'value' : this.target.selectedSensorId });\n\n        if(sensor) {\n            this.target.selectedSensorName =sensor.text;\n            this.target.selectedSensorDirty = false;\n        } else {\n            this.target.selectedSensorDirty = true;\n            this.target.selectedDatastreamId = 0;\n            this.alertSrv.set(\"Sensor Not Found\", this.target.selectedSensorId + \" is not a valid sensor name\", 'error', this.notificationShowTime);\n        }\n        this.resetDataSource();\n    }\n    //sensor ends\n\n    //datastream starts\n    showDatastreams(){\n        return (this.target.selectedSensorId!=0 || this.target.selectedThingId!=0) &&\n                (this.target.type == \"Sensors\" || this.target.type == \"Things\") &&\n                (this.target.panelType != 'grafana-worldmap-panel');\n    }\n// TODO: show errors below each query editor\n    getDataStreams(query) {\n        let self = this;\n        let targetUrl = \"\";\n        if (this.target.selectedThingDirty || this.target.selectedSensorDirty) {\n            return [{\n                text: \"select a datastream\",\n                value: 0\n            }];\n        }\n        if (this.target.type == 'Sensors') {\n            targetUrl = \"/Sensors(\"+this.target.selectedSensorId+\")/Datastreams\";\n        } else {\n            targetUrl = \"/Things(\"+this.target.selectedThingId+\")/Datastreams\";\n        }\n        return this.datasource.metricFindQuery((query || ''),targetUrl,'datastream').then((result)=>{\n            self.allDataSources = result;\n            return result;\n        }).catch(this.handleQueryCtrlError.bind(this));\n    }\n\n    onDataStreamChange(query) {\n        if (this.target.selectedThingDirty || this.target.selectedSensorDirty) {\n            return;\n        }\n        let datastream = _.find(this.allDataSources, { 'value' : this.target.selectedDatastreamId });\n        if(datastream) {\n            this.target.selectedDatastreamName = _.find(this.allDataSources, { 'value' : this.target.selectedDatastreamId }).text;\n            this.target.selectedDatastreamDirty = false;\n        } else {\n            this.target.selectedDatastreamDirty = true;\n            this.target.selectedDatastreamName = this.target.selectedDatastreamId;\n            this.alertSrv.set(\"Datastream Not Found\", this.target.selectedDatastreamName + \" is not a valid datastream name\", 'error', this.notificationShowTime);\n        }\n        this.panelCtrl.refresh();\n    }\n\n    resetDataSource(){\n        this.target.selectedDatastreamId = 0;\n        this.target.selectedDatastreamName = \"select a datastream\";\n        this.panelCtrl.refresh();\n    }\n    //datastream ends\n\n    typeChanged(type) {\n        this.target.selectedSensorId = 0;\n        this.target.selectedThingId = 0;\n        this.resetDataSource();\n    }\n\n    //thing starts\n    showThings(){\n        return this.target.type == 'Things' || this.target.type == 'Historical Locations' || (this.target.panelType == 'grafana-worldmap-panel');\n    }\n\n    getThings(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Things\",'thing').then((result)=>{\n            self.allThings = result;\n            return result;\n        }).catch(this.handleQueryCtrlError.bind(this));\n    }\n\n    onThingChange(query) {\n\n        let thing = _.find(this.allThings, { 'value' : this.target.selectedThingId });\n        if(thing) {\n            this.target.selectedThingName = thing.text;\n            this.target.selectedThingDirty = false;\n        } else {\n            this.target.selectedThingDirty = true;\n            this.target.selectedDatastreamId = 0;\n            this.alertSrv.set(\"Thing Not Found\", this.target.selectedThingId + \" is not a valid thing name\", 'error', this.notificationShowTime);\n        }\n        this.resetDataSource();\n    }\n    //thing ends\n\n    //location starts\n    showLocations(){\n        return this.target.type == 'Locations';\n    }\n\n    getLocations(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Locations\",'location').then((result)=>{\n            self.allLocations = result;\n            return result;\n        }).catch(this.handleQueryCtrlError.bind(this));\n    }\n\n    onLocationChange(query) {\n        // find and store the selected location name to use it as column name (refer datasource.js->transformThings())\n        let location = _.find(this.allLocations, { 'value' : this.target.selectedLocationId });\n\n        if (location) {\n            this.target.selectedLocationName = location.text;\n            this.target.selectedLocationDirty = false;\n        } else {\n            this.target.selectedLocationDirty = true;\n            this.alertSrv.set(\"Location Not Found\", this.target.selectedLocationId + \" is not a valid location name\", 'error', this.notificationShowTime);\n        }\n\n        this.panelCtrl.refresh();\n    }\n    //location ends\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
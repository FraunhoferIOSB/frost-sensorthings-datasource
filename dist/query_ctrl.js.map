{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","type","ogcType","ogcUrl","allDataSources","delay","start","Date","getTime","query","console","log","metricTypes","self","datasource","metricFindQuery","then","result","rawQuery","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;4CAGKC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAAgC;AAAA;;AAAA,8JACxBD,MADwB,EAChBC,SADgB;;AAG9B,gBAAKC,KAAL,GAAaF,MAAb;AACA,gBAAKG,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAA3C;AACA,gBAAKA,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,IAAoB,WAAvC;AACA,gBAAKD,MAAL,CAAYE,OAAZ,GAAsB,MAAKF,MAAL,CAAYE,OAAZ,IAAuB,EAA7C;AACA,gBAAKF,MAAL,CAAYG,MAAZ,GAAqB,MAAKH,MAAL,CAAYG,MAAZ,IAAsB,EAA3C;AACA,gBAAKC,cAAL,GAAuB,EAAvB;AAR8B;AAS/B;;;;gCAEKC,K,EAAO;AACX,gBAAIC,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,mBAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,QAAQD,KAAtC,EAA4C,CAE3C;AACF;;;qCAEUI,K,EAAMP,O,EAAS;AACxBQ,oBAAQC,GAAR,CAAY,YAAZ;AACA;AACA;AACA,gBAAIC,cAAc;AAChB,yBAAY,UADI;AAEhB,6BAAgB;AAFA,aAAlB;AAIA,gBAAIC,OAAO,IAAX;AACA,iBAAKb,MAAL,CAAYE,OAAZ,GAAsBA,OAAtB;AACA,iBAAKF,MAAL,CAAYG,MAAZ,GAAqBS,YAAYV,OAAZ,CAArB;AACA,mBAAO,KAAKY,UAAL,CAAgBC,eAAhB,CAAiCN,SAAS,EAA1C,EAA8CG,YAAYV,OAAZ,CAA9C,EAAoEc,IAApE,CAAyE,UAACC,MAAD,EAAU;AACxF;AACAJ,mBAAKT,cAAL,GAAsBa,MAAtB;AACA;AACA,qBAAOA,MAAP;AACD,aALM,CAAP;AAMD;;;6CAEkB;AACjB,iBAAKjB,MAAL,CAAYkB,QAAZ,GAAuB,CAAC,KAAKlB,MAAL,CAAYkB,QAApC;AACD;;;2CAEgBT,K,EAAO;AACtB;AACAC,oBAAQC,GAAR,CAAY,kBAAZ;AACAD,oBAAQC,GAAR,CAAY,KAAKP,cAAjB;AACA;AACA,iBAAKe,SAAL,CAAeC,OAAf,GALsB,CAKI;AAC3B;;;;QAjD6CzB,S;;;;AAoDhDC,iCAA2ByB,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || 'timeserie';\n    this.target.ogcType = this.target.ogcType || \"\";\n    this.target.ogcUrl = this.target.ogcUrl || \"\";\n    this.allDataSources  = {};\n  }\n\n  sleep(delay) {\n    var start = new Date().getTime();\n    while (new Date().getTime() < start + delay){\n\n    };\n  }\n\n  getOptions(query,ogcType) {\n    console.log(\"getOptions\");\n    // this.sleep(2000);\n    // console.log(\"slept for 2 seconds\");\n    let metricTypes = {\n      'sensors' : \"/Sensors\",\n      'datastreams' : \"/Datastreams\",\n    };\n    let self = this;\n    this.target.ogcType = ogcType;\n    this.target.ogcUrl = metricTypes[ogcType];\n    return this.datasource.metricFindQuery((query || ''),metricTypes[ogcType]).then((result)=>{\n      // console.log(this.target.target);\n      self.allDataSources = result;\n      // console.log(result);\n      return result;\n    });\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal(query) {\n    // console.log(query);\n    console.log(\"internal changed\");\n    console.log(this.allDataSources);\n    // this.target.target = \"changed\" ;\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
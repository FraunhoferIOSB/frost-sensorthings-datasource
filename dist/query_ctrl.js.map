{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","type","senTarget","allSensors","selectedSensorId","thingTarget","allThings","selectedThingId","dsTarget","allDataSources","datastreamID","delay","start","Date","getTime","query","self","targetUrl","datasource","metricFindQuery","then","result","rawQuery","selectedDataSource","_","find","id","panelCtrl","refresh","selectedSensor","onChangeInternal","selectedThing","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector)  {\n        super($scope, $injector);\n\n        this.scope = $scope;\n\n        this.target.type = this.target.type || 'Sensor';\n\n        // sensor init start\n        this.target.senTarget = this.target.senTarget || 'select a sensor';\n        this.allSensors  = {};\n        this.target.selectedSensorId = this.target.selectedSensorId || 0;\n        // sensor init end\n\n        // thing init start\n        this.target.thingTarget = this.target.thingTarget || 'select a thing';\n        this.allThings  = {};\n        this.target.selectedThingId = this.target.selectedThingId || 0;\n        // thing init end\n\n        // datasource init start\n        this.target.dsTarget = this.target.dsTarget || 'select metric';\n        this.allDataSources  = {};\n        this.target.datastreamID = this.target.datastreamID || 0;\n        // datasource init end\n    }\n\n    sleep(delay) {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay){\n\n        };\n    }\n\n\n    getOptions(query) {\n        let self = this;\n        let targetUrl = \"\";\n        if (this.target.type == 'Sensor') {\n            targetUrl = \"/Sensors(\"+this.target.selectedSensorId+\")/Datastreams\";\n        } else {\n            targetUrl = \"/Things(\"+this.target.selectedThingId+\")/Datastreams\";\n        }\n        return this.datasource.metricFindQuery((query || ''),targetUrl).then((result)=>{\n            self.allDataSources = result;\n            return result;\n        });\n    }\n\n    showSensors(){\n        return this.target.type == 'Sensor';\n    }\n\n    showThings(){\n        return this.target.type == 'Thing';\n    }\n\n    getSensors(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Sensors\").then((result)=>{\n            self.allSensors = result;\n            return result;\n        });\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    onChangeInternal(query) {\n        let selectedDataSource =_.find(this.allDataSources, { 'value' : this.target.dsTarget });\n        if (selectedDataSource) {\n            this.target.datastreamID = selectedDataSource.id ;\n        } else {\n            this.target.datastreamID = 0 ;\n        }\n        this.panelCtrl.refresh();\n    }\n\n    onSensorChange(query) {\n        this.target.dsTarget = \"select metric\";\n        let selectedSensor =_.find(this.allSensors, { 'value' : this.target.senTarget });\n        if (selectedSensor) {\n            this.target.selectedSensorId = selectedSensor.id ;\n        } else {\n            this.target.selectedSensorId = 0 ;\n        }\n        this.onChangeInternal();\n    }\n\n    typeChanged(type) {\n        // resetting and refreshing panel if type(sensor or thing) changed\n        this.target.dsTarget = \"select metric\";\n        this.target.senTarget = \"select a sensor\";\n        this.target.thingTarget = \"select a thing\";\n        this.target.selectedSensorId = 0;\n        this.target.selectedThingId = 0;\n        this.onChangeInternal();\n    }\n\n    getThings(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Things\").then((result)=>{\n            self.allThings = result;\n            return result;\n        });\n    }\n\n    onThingChange(query) {\n        this.target.dsTarget = \"select metric\";\n        let selectedThing =_.find(this.allThings, { 'value' : this.target.thingTarget });\n        if (selectedThing) {\n            this.target.selectedThingId = selectedThing.id ;\n        } else {\n            this.target.selectedThingId = 0 ;\n        }\n        this.onChangeInternal();\n    }\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
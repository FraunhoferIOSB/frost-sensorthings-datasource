{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","dsTarget","type","ogcType","ogcUrl","datastreamID","allDataSources","delay","start","Date","getTime","query","metricTypes","self","datasource","metricFindQuery","then","result","rawQuery","selectedDataSource","_","find","id","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;4CAEKC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAAgC;AAAA;;AAAA,8JACxBD,MADwB,EAChBC,SADgB;;AAG9B,gBAAKC,KAAL,GAAaF,MAAb;AACA,gBAAKG,MAAL,CAAYC,QAAZ,GAAuB,MAAKD,MAAL,CAAYC,QAAZ,IAAwB,eAA/C;AACA,gBAAKD,MAAL,CAAYE,IAAZ,GAAmB,MAAKF,MAAL,CAAYE,IAAZ,IAAoB,WAAvC;AACA,gBAAKF,MAAL,CAAYG,OAAZ,GAAsB,MAAKH,MAAL,CAAYG,OAAZ,IAAuB,EAA7C;AACA,gBAAKH,MAAL,CAAYI,MAAZ,GAAqB,MAAKJ,MAAL,CAAYI,MAAZ,IAAsB,EAA3C;AACA,gBAAKJ,MAAL,CAAYK,YAAZ,GAA2B,MAAKL,MAAL,CAAYK,YAAZ,IAA4B,CAAvD;AACA,gBAAKC,cAAL,GAAuB,EAAvB;AAT8B;AAU/B;;;;gCAEKC,K,EAAO;AACX,gBAAIC,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,mBAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,QAAQD,KAAtC,EAA4C,CAE3C;AACF;;;qCAGUI,K,EAAMR,O,EAAS;;AAExB,gBAAIS,cAAc;AAChB,yBAAY,UADI;AAEhB,6BAAgB;AAFA,aAAlB;AAIA,gBAAIC,OAAO,IAAX;AACA,iBAAKb,MAAL,CAAYG,OAAZ,GAAsBA,OAAtB;AACA,iBAAKH,MAAL,CAAYI,MAAZ,GAAqBQ,YAAYT,OAAZ,CAArB;AACA,mBAAO,KAAKW,UAAL,CAAgBC,eAAhB,CAAiCJ,SAAS,EAA1C,EAA8CC,YAAYT,OAAZ,CAA9C,EAAoEa,IAApE,CAAyE,UAACC,MAAD,EAAU;AACxFJ,mBAAKP,cAAL,GAAsBW,MAAtB;AACA,qBAAOA,MAAP;AACD,aAHM,CAAP;AAKD;;;6CAEkB;AACjB,iBAAKjB,MAAL,CAAYkB,QAAZ,GAAuB,CAAC,KAAKlB,MAAL,CAAYkB,QAApC;AACD;;;2CAEgBP,K,EAAO;AACtB,gBAAIQ,qBAAoBC,EAAEC,IAAF,CAAO,KAAKf,cAAZ,EAA4B,EAAE,SAAU,KAAKN,MAAL,CAAYC,QAAxB,EAA5B,CAAxB;AACA,gBAAIkB,kBAAJ,EAAwB;AACpB,mBAAKnB,MAAL,CAAYK,YAAZ,GAA2Bc,mBAAmBG,EAA9C;AACH,aAFD,MAEO;AACH,mBAAKtB,MAAL,CAAYK,YAAZ,GAA2B,CAA3B;AACH;AACD,iBAAKkB,SAAL,CAAeC,OAAf;AACD;;;;QAlD6C7B,S;;;;AAqDhDC,iCAA2B6B,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.dsTarget = this.target.dsTarget || 'select metric';\n    this.target.type = this.target.type || 'timeserie';\n    this.target.ogcType = this.target.ogcType || \"\";\n    this.target.ogcUrl = this.target.ogcUrl || \"\";\n    this.target.datastreamID = this.target.datastreamID || 0;\n    this.allDataSources  = {};\n  }\n\n  sleep(delay) {\n    var start = new Date().getTime();\n    while (new Date().getTime() < start + delay){\n\n    };\n  }\n\n\n  getOptions(query,ogcType) {\n\n    let metricTypes = {\n      'sensors' : \"/Sensors\",\n      'datastreams' : \"/Datastreams\",\n    };\n    let self = this;\n    this.target.ogcType = ogcType;\n    this.target.ogcUrl = metricTypes[ogcType];\n    return this.datasource.metricFindQuery((query || ''),metricTypes[ogcType]).then((result)=>{\n      self.allDataSources = result;\n      return result;\n    });\n\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal(query) {\n    let selectedDataSource =_.find(this.allDataSources, { 'value' : this.target.dsTarget });\n    if (selectedDataSource) {\n        this.target.datastreamID = selectedDataSource.id ;\n    } else {\n        this.target.datastreamID = 0 ;\n    }\n    this.panelCtrl.refresh();\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","panelType","ctrl","panel","type","senTarget","allSensors","selectedSensorId","thingTarget","allThings","selectedThingId","dsTarget","allDataSources","datastreamID","locationTarget","selectedLocation","allLocations","delay","start","Date","getTime","query","self","targetUrl","datasource","metricFindQuery","then","result","targetTypes","push","rawQuery","selectedDataSource","_","find","id","panelCtrl","refresh","selectedSensor","onChangeInternal","selectedThing","LocationFindQuery","bind","text","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,qB,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;kDAEKC,0B;;;AAET,oDAAYC,MAAZ,EAAoBC,SAApB,EAAgC;AAAA;;AAAA,wKACtBD,MADsB,EACdC,SADc;;AAG5B,0BAAKC,KAAL,GAAaF,MAAb;AACA,0BAAKG,MAAL,CAAYC,SAAZ,GAAwB,MAAKF,KAAL,CAAWG,IAAX,CAAgBC,KAAhB,CAAsBC,IAA9C;;AAEA,0BAAKJ,MAAL,CAAYI,IAAZ,GAAmB,MAAKJ,MAAL,CAAYI,IAAZ,IAAoB,QAAvC;;AAEA;AACA,0BAAKJ,MAAL,CAAYK,SAAZ,GAAwB,MAAKL,MAAL,CAAYK,SAAZ,IAAyB,iBAAjD;AACA,0BAAKC,UAAL,GAAmB,EAAnB;AACA,0BAAKN,MAAL,CAAYO,gBAAZ,GAA+B,MAAKP,MAAL,CAAYO,gBAAZ,IAAgC,CAA/D;AACA;;AAEA;AACA,0BAAKP,MAAL,CAAYQ,WAAZ,GAA0B,MAAKR,MAAL,CAAYQ,WAAZ,IAA2B,gBAArD;AACA,0BAAKC,SAAL,GAAkB,EAAlB;AACA,0BAAKT,MAAL,CAAYU,eAAZ,GAA8B,MAAKV,MAAL,CAAYU,eAAZ,IAA+B,CAA7D;AACA;;AAEA;AACA,0BAAKV,MAAL,CAAYW,QAAZ,GAAuB,MAAKX,MAAL,CAAYW,QAAZ,IAAwB,eAA/C;AACA,0BAAKC,cAAL,GAAuB,EAAvB;AACA,0BAAKZ,MAAL,CAAYa,YAAZ,GAA2B,MAAKb,MAAL,CAAYa,YAAZ,IAA4B,CAAvD;AACA;;AAEA;AACA,0BAAKb,MAAL,CAAYc,cAAZ,GAA6B,MAAKd,MAAL,CAAYc,cAAZ,IAA8B,CAA3D;AACA,0BAAKd,MAAL,CAAYe,gBAAZ,GAA+B,MAAKf,MAAL,CAAYe,gBAAZ,IAAgC,mBAA/D;AACA,0BAAKC,YAAL,GAAoB,EAApB;AACA;AA9B4B;AA+B/B;;;;0CAEKC,K,EAAO;AACT,4BAAIC,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,+BAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,QAAQD,KAAtC,EAA4C,CAE3C;AACJ;;;+CAGUI,K,EAAO;AACd,4BAAIC,OAAO,IAAX;AACA,4BAAIC,YAAY,EAAhB;AACA,4BAAI,KAAKvB,MAAL,CAAYI,IAAZ,IAAoB,QAAxB,EAAkC;AAC9BmB,wCAAY,cAAY,KAAKvB,MAAL,CAAYO,gBAAxB,GAAyC,eAArD;AACH,yBAFD,MAEO;AACHgB,wCAAY,aAAW,KAAKvB,MAAL,CAAYU,eAAvB,GAAuC,eAAnD;AACH;AACD,+BAAO,KAAKc,UAAL,CAAgBC,eAAhB,CAAiCJ,SAAS,EAA1C,EAA8CE,SAA9C,EAAyDG,IAAzD,CAA8D,UAACC,MAAD,EAAU;AAC3EL,iCAAKV,cAAL,GAAsBe,MAAtB;AACA,mCAAOA,MAAP;AACH,yBAHM,CAAP;AAIH;;;qDAEgB;AACb,4BAAIC,cAAc,CAAC,QAAD,EAAW,OAAX,CAAlB;AACA,4BAAI,KAAK5B,MAAL,CAAYC,SAAZ,IAAyB,OAA7B,EAAsC;AAClC2B,wCAAYC,IAAZ,CAAiB,UAAjB;AACH;AACD,+BAAOD,WAAP;AACH;;;kDAEY;AACT,+BAAO,KAAK5B,MAAL,CAAYI,IAAZ,IAAoB,QAA3B;AACH;;;iDAEW;AACR,+BAAO,KAAKJ,MAAL,CAAYI,IAAZ,IAAoB,OAA3B;AACH;;;oDAEc;AACX,+BAAO,KAAKJ,MAAL,CAAYI,IAAZ,IAAoB,UAA3B;AACH;;;+CAEUiB,K,EAAO;AACd,4BAAIC,OAAO,IAAX;AACA,+BAAO,KAAKE,UAAL,CAAgBC,eAAhB,CAAiCJ,SAAS,EAA1C,EAA8C,UAA9C,EAA0DK,IAA1D,CAA+D,UAACC,MAAD,EAAU;AAC5EL,iCAAKhB,UAAL,GAAkBqB,MAAlB;AACA,mCAAOA,MAAP;AACH,yBAHM,CAAP;AAIH;;;uDAEkB;AACf,6BAAK3B,MAAL,CAAY8B,QAAZ,GAAuB,CAAC,KAAK9B,MAAL,CAAY8B,QAApC;AACH;;;qDAEgBT,K,EAAO;AACpB,4BAAIU,qBAAoBC,EAAEC,IAAF,CAAO,KAAKrB,cAAZ,EAA4B,EAAE,SAAU,KAAKZ,MAAL,CAAYW,QAAxB,EAA5B,CAAxB;AACA,4BAAIoB,kBAAJ,EAAwB;AACpB,iCAAK/B,MAAL,CAAYa,YAAZ,GAA2BkB,mBAAmBG,EAA9C;AACH,yBAFD,MAEO;AACH,iCAAKlC,MAAL,CAAYa,YAAZ,GAA2B,CAA3B;AACH;AACD,6BAAKsB,SAAL,CAAeC,OAAf;AACH;;;mDAEcf,K,EAAO;AAClB,6BAAKrB,MAAL,CAAYW,QAAZ,GAAuB,eAAvB;AACA,4BAAI0B,iBAAgBL,EAAEC,IAAF,CAAO,KAAK3B,UAAZ,EAAwB,EAAE,SAAU,KAAKN,MAAL,CAAYK,SAAxB,EAAxB,CAApB;AACA,4BAAIgC,cAAJ,EAAoB;AAChB,iCAAKrC,MAAL,CAAYO,gBAAZ,GAA+B8B,eAAeH,EAA9C;AACH,yBAFD,MAEO;AACH,iCAAKlC,MAAL,CAAYO,gBAAZ,GAA+B,CAA/B;AACH;AACD,6BAAK+B,gBAAL;AACH;;;gDAEWlC,I,EAAM;AACd;AACA,6BAAKJ,MAAL,CAAYW,QAAZ,GAAuB,eAAvB;AACA,6BAAKX,MAAL,CAAYK,SAAZ,GAAwB,iBAAxB;AACA,6BAAKL,MAAL,CAAYQ,WAAZ,GAA0B,gBAA1B;AACA,6BAAKR,MAAL,CAAYO,gBAAZ,GAA+B,CAA/B;AACA,6BAAKP,MAAL,CAAYU,eAAZ,GAA8B,CAA9B;AACA,6BAAK4B,gBAAL;AACH;;;8CAESjB,K,EAAO;AACb,4BAAIC,OAAO,IAAX;AACA,+BAAO,KAAKE,UAAL,CAAgBC,eAAhB,CAAiCJ,SAAS,EAA1C,EAA8C,SAA9C,EAAyDK,IAAzD,CAA8D,UAACC,MAAD,EAAU;AAC3EL,iCAAKb,SAAL,GAAiBkB,MAAjB;AACA,mCAAOA,MAAP;AACH,yBAHM,CAAP;AAIH;;;kDAEaN,K,EAAO;AACjB,6BAAKrB,MAAL,CAAYW,QAAZ,GAAuB,eAAvB;AACA,4BAAI4B,gBAAeP,EAAEC,IAAF,CAAO,KAAKxB,SAAZ,EAAuB,EAAE,SAAU,KAAKT,MAAL,CAAYQ,WAAxB,EAAvB,CAAnB;AACA,4BAAI+B,aAAJ,EAAmB;AACf,iCAAKvC,MAAL,CAAYU,eAAZ,GAA8B6B,cAAcL,EAA5C;AACH,yBAFD,MAEO;AACH,iCAAKlC,MAAL,CAAYU,eAAZ,GAA8B,CAA9B;AACH;AACD,6BAAK4B,gBAAL;AACH;;;iDAEYjB,K,EAAO;AAAA;;AAChB,+BAAO,KAAKG,UAAL,CAAgBgB,iBAAhB,CAAmCnB,SAAS,EAA5C,EAAgD,YAAhD,EAA8DK,IAA9D,CAAoE,UAACC,MAAD,EAAU;AACjF,mCAAKX,YAAL,GAAoBW,MAApB;AACA,mCAAOA,MAAP;AACH,yBAHyE,CAGvEc,IAHuE,CAGlE,IAHkE,CAAnE,CAAP;AAIH;;;qDAEgB3B,c,EAAgB;AAC7B;AACA,6BAAKd,MAAL,CAAYe,gBAAZ,GAA8BiB,EAAEC,IAAF,CAAO,KAAKjB,YAAZ,EAA0B,EAAE,SAAUF,cAAZ,EAA1B,EAAwD4B,IAAtF;AACA,6BAAKP,SAAL,CAAeC,OAAf;AACH;;;;cAtJ2CzC,S;;;;AA0JhDC,uCAA2B+C,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector)  {\n        super($scope, $injector);\n\n        this.scope = $scope;\n        this.target.panelType = this.scope.ctrl.panel.type;\n\n        this.target.type = this.target.type || 'Sensor';\n\n        // sensor init start\n        this.target.senTarget = this.target.senTarget || 'select a sensor';\n        this.allSensors  = {};\n        this.target.selectedSensorId = this.target.selectedSensorId || 0;\n        // sensor init end\n\n        // thing init start\n        this.target.thingTarget = this.target.thingTarget || 'select a thing';\n        this.allThings  = {};\n        this.target.selectedThingId = this.target.selectedThingId || 0;\n        // thing init end\n\n        // datasource init start\n        this.target.dsTarget = this.target.dsTarget || 'select metric';\n        this.allDataSources  = {};\n        this.target.datastreamID = this.target.datastreamID || 0;\n        // datasource init end\n\n        // Location init start\n        this.target.locationTarget = this.target.locationTarget || 0;\n        this.target.selectedLocation = this.target.selectedLocation || 'select a location';\n        this.allLocations = {};\n        // Location init end\n    }\n\n    sleep(delay) {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay){\n\n        };\n    }\n\n\n    getOptions(query) {\n        let self = this;\n        let targetUrl = \"\";\n        if (this.target.type == 'Sensor') {\n            targetUrl = \"/Sensors(\"+this.target.selectedSensorId+\")/Datastreams\";\n        } else {\n            targetUrl = \"/Things(\"+this.target.selectedThingId+\")/Datastreams\";\n        }\n        return this.datasource.metricFindQuery((query || ''),targetUrl).then((result)=>{\n            self.allDataSources = result;\n            return result;\n        });\n    }\n\n    getTargetTypes() {\n        let targetTypes = ['Sensor', 'Thing'];\n        if (this.target.panelType == 'table') {\n            targetTypes.push('Location');\n        }\n        return targetTypes;\n    }\n\n    showSensors(){\n        return this.target.type == 'Sensor';\n    }\n\n    showThings(){\n        return this.target.type == 'Thing';\n    }\n\n    showLocations(){\n        return this.target.type == 'Location';\n    }\n\n    getSensors(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Sensors\").then((result)=>{\n            self.allSensors = result;\n            return result;\n        });\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    onChangeInternal(query) {\n        let selectedDataSource =_.find(this.allDataSources, { 'value' : this.target.dsTarget });\n        if (selectedDataSource) {\n            this.target.datastreamID = selectedDataSource.id ;\n        } else {\n            this.target.datastreamID = 0 ;\n        }\n        this.panelCtrl.refresh();\n    }\n\n    onSensorChange(query) {\n        this.target.dsTarget = \"select metric\";\n        let selectedSensor =_.find(this.allSensors, { 'value' : this.target.senTarget });\n        if (selectedSensor) {\n            this.target.selectedSensorId = selectedSensor.id ;\n        } else {\n            this.target.selectedSensorId = 0 ;\n        }\n        this.onChangeInternal();\n    }\n\n    typeChanged(type) {\n        // resetting and refreshing panel if type(sensor or thing) changed\n        this.target.dsTarget = \"select metric\";\n        this.target.senTarget = \"select a sensor\";\n        this.target.thingTarget = \"select a thing\";\n        this.target.selectedSensorId = 0;\n        this.target.selectedThingId = 0;\n        this.onChangeInternal();\n    }\n\n    getThings(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Things\").then((result)=>{\n            self.allThings = result;\n            return result;\n        });\n    }\n\n    onThingChange(query) {\n        this.target.dsTarget = \"select metric\";\n        let selectedThing =_.find(this.allThings, { 'value' : this.target.thingTarget });\n        if (selectedThing) {\n            this.target.selectedThingId = selectedThing.id ;\n        } else {\n            this.target.selectedThingId = 0 ;\n        }\n        this.onChangeInternal();\n    }\n\n    getLocations(query) {\n        return this.datasource.LocationFindQuery((query || ''),\"/Locations\").then(((result)=>{\n            this.allLocations = result;\n            return result;\n        }).bind(this));\n    }\n\n    onLocationChange(locationTarget) {\n        // find and store the selected location name to use it as column name (refer datasource.js->transformThings())\n        this.target.selectedLocation =_.find(this.allLocations, { 'value' : locationTarget }).text;\n        this.panelCtrl.refresh();\n    }\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","panelType","ctrl","panel","type","selectedDatastreamId","selectedDatastreamName","allDataSources","selectedSensorId","selectedSensorName","allSensors","selectedThingId","selectedThingName","allThings","selectedLocationId","selectedLocationName","allLocations","targetTypes","push","rawQuery","query","self","datasource","metricFindQuery","then","result","_","find","text","resetDataSource","targetUrl","panelCtrl","refresh","bind","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector)  {\n        super($scope, $injector);\n\n        this.scope = $scope;\n        this.target.panelType = this.scope.ctrl.panel.type;\n\n        this.target.type = this.target.type || 'Sensors';\n\n        // datasource init start\n        this.target.selectedDatastreamId = this.target.selectedDatastreamId || 0;\n        this.target.selectedDatastreamName = this.target.selectedDatastreamName || 'select a datastream';\n        this.allDataSources  = {};\n        // datasource init end\n\n        // sensor init start\n        this.target.selectedSensorId = this.target.selectedSensorId || 0;\n        this.target.selectedSensorName = this.target.selectedSensorName || 'select a sensor';\n        this.allSensors  = {};\n        // sensor init end\n\n        // thing init start\n        this.target.selectedThingId = this.target.selectedThingId || 0;\n        this.target.selectedThingName = this.target.selectedThingName || 'select a thing';\n        this.allThings  = {};\n        // thing init end\n\n\n        // Location init start\n        this.target.selectedLocationId = this.target.selectedLocationId || 0;\n        this.target.selectedLocationName = this.target.selectedLocationName || 'select a location';\n        this.allLocations = {};\n        // Location init end\n    }\n\n    getTargetTypes() {\n        let targetTypes = ['Sensors', 'Things'];\n        if (this.target.panelType == 'table') {\n            targetTypes.push('Locations','Historical Locations');\n        }\n        return targetTypes;\n    }\n\n    showControlTypes(){\n        return (this.target.panelType != 'grafana-worldmap-panel');\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n\n    //sensor starts\n    showSensors(){\n        return this.target.type == 'Sensors' &&\n                (this.target.panelType != 'grafana-worldmap-panel');\n    }\n\n    getSensors(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Sensors\",'sensor').then((result)=>{\n            self.allSensors = result;\n            return result;\n        });\n    }\n\n    onSensorChange(query,selectedSensorId) {\n        this.target.selectedSensorName =_.find(this.allSensors, { 'value' : this.target.selectedSensorId }).text;\n        this.resetDataSource();\n    }\n    //sensor ends\n\n    //datastream starts\n    showDatastreams(){\n        return (this.target.selectedSensorId!=0 || this.target.selectedThingId!=0) &&\n                (this.target.type == \"Sensors\" || this.target.type == \"Things\") &&\n                (this.target.panelType != 'grafana-worldmap-panel');\n    }\n\n    getDataSources(query) {\n        let self = this;\n        let targetUrl = \"\";\n        if (this.target.type == 'Sensors') {\n            targetUrl = \"/Sensors(\"+this.target.selectedSensorId+\")/Datastreams\";\n        } else {\n            targetUrl = \"/Things(\"+this.target.selectedThingId+\")/Datastreams\";\n        }\n        return this.datasource.metricFindQuery((query || ''),targetUrl,'datastream').then((result)=>{\n            self.allDataSources = result;\n            return result;\n        });\n    }\n\n    onDataSourceChange(query) {\n        this.target.selectedDatastreamName =_.find(this.allDataSources, { 'value' : this.target.selectedDatastreamId }).text;\n        this.panelCtrl.refresh();\n    }\n\n    resetDataSource(){\n        this.target.selectedDatastreamId = 0;\n        this.target.selectedDatastreamName = \"select a datastream\";\n        this.panelCtrl.refresh();\n    }\n    //datastream ends\n\n    typeChanged(type) {\n        this.target.selectedSensorId = 0;\n        this.target.selectedThingId = 0;\n        this.resetDataSource();\n    }\n\n    //thing starts\n    showThings(){\n        return this.target.type == 'Things' || this.target.type == 'Historical Locations' || (this.target.panelType == 'grafana-worldmap-panel');\n    }\n\n    getThings(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Things\",'thing').then((result)=>{\n            self.allThings = result;\n            return result;\n        });\n    }\n\n    onThingChange(query) {\n        this.target.selectedThingName =_.find(this.allThings, { 'value' : this.target.selectedThingId }).text;\n        this.resetDataSource();\n    }\n    //thing ends\n\n    //location starts\n    showLocations(){\n        return this.target.type == 'Locations';\n    }\n\n    getLocations(query) {\n        return this.datasource.metricFindQuery((query || ''),\"/Locations\",'location').then(((result)=>{\n            this.allLocations = result;\n            return result;\n        }).bind(this));\n    }\n\n    onLocationChange(query) {\n        // find and store the selected location name to use it as column name (refer datasource.js->transformThings())\n        this.target.selectedLocationName =_.find(this.allLocations, { 'value' : this.target.selectedLocationId }).text;\n        this.panelCtrl.refresh();\n    }\n    //location ends\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","type","senTarget","allSensors","selectedSensorId","dsTarget","datastreamID","allDataSources","delay","start","Date","getTime","query","self","datasource","metricFindQuery","then","result","rawQuery","selectedDataSource","_","find","id","panelCtrl","refresh","selectedSensor","onChangeInternal","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,qB,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;kDAEKC,0B;;;AAET,oDAAYC,MAAZ,EAAoBC,SAApB,EAAgC;AAAA;;AAAA,wKACtBD,MADsB,EACdC,SADc;;AAG5B,0BAAKC,KAAL,GAAaF,MAAb;;AAEA,0BAAKG,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,IAAoB,WAAvC;;AAEA,0BAAKD,MAAL,CAAYE,SAAZ,GAAwB,MAAKF,MAAL,CAAYE,SAAZ,IAAyB,eAAjD;AACA,0BAAKC,UAAL,GAAmB,EAAnB;AACA,0BAAKH,MAAL,CAAYI,gBAAZ,GAA+B,MAAKJ,MAAL,CAAYI,gBAAZ,IAAgC,CAA/D;;AAEA,0BAAKJ,MAAL,CAAYK,QAAZ,GAAuB,MAAKL,MAAL,CAAYK,QAAZ,IAAwB,eAA/C;AACA,0BAAKL,MAAL,CAAYM,YAAZ,GAA2B,MAAKN,MAAL,CAAYM,YAAZ,IAA4B,CAAvD;AACA,0BAAKC,cAAL,GAAuB,EAAvB;AAb4B;AAc/B;;;;0CAEKC,K,EAAO;AACT,4BAAIC,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,+BAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,QAAQD,KAAtC,EAA4C,CAE3C;AACJ;;;+CAGUI,K,EAAO;AACd,4BAAIC,OAAO,IAAX;AACA,+BAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAiCH,SAAS,EAA1C,EAA8C,cAAY,KAAKZ,MAAL,CAAYI,gBAAxB,GAAyC,eAAvF,EAAwGY,IAAxG,CAA6G,UAACC,MAAD,EAAU;AAC1HJ,iCAAKN,cAAL,GAAsBU,MAAtB;AACA,mCAAOA,MAAP;AACH,yBAHM,CAAP;AAIH;;;+CAEUL,K,EAAO;AACd,4BAAIC,OAAO,IAAX;AACA,+BAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAiCH,SAAS,EAA1C,EAA8C,UAA9C,EAA0DI,IAA1D,CAA+D,UAACC,MAAD,EAAU;AAC5EJ,iCAAKV,UAAL,GAAkBc,MAAlB;AACA,mCAAOA,MAAP;AACH,yBAHM,CAAP;AAIH;;;uDAEkB;AACf,6BAAKjB,MAAL,CAAYkB,QAAZ,GAAuB,CAAC,KAAKlB,MAAL,CAAYkB,QAApC;AACH;;;qDAEgBN,K,EAAO;AACpB,4BAAIO,qBAAoBC,EAAEC,IAAF,CAAO,KAAKd,cAAZ,EAA4B,EAAE,SAAU,KAAKP,MAAL,CAAYK,QAAxB,EAA5B,CAAxB;AACA,4BAAIc,kBAAJ,EAAwB;AACpB,iCAAKnB,MAAL,CAAYM,YAAZ,GAA2Ba,mBAAmBG,EAA9C;AACH,yBAFD,MAEO;AACH,iCAAKtB,MAAL,CAAYM,YAAZ,GAA2B,CAA3B;AACH;AACD,6BAAKiB,SAAL,CAAeC,OAAf;AACH;;;mDAEcZ,K,EAAO;AAClB,6BAAKZ,MAAL,CAAYK,QAAZ,GAAuB,eAAvB;AACA,4BAAIoB,iBAAgBL,EAAEC,IAAF,CAAO,KAAKlB,UAAZ,EAAwB,EAAE,SAAU,KAAKH,MAAL,CAAYE,SAAxB,EAAxB,CAApB;AACA,4BAAIuB,cAAJ,EAAoB;AAChB,iCAAKzB,MAAL,CAAYI,gBAAZ,GAA+BqB,eAAeH,EAA9C;AACH,yBAFD,MAEO;AACH,iCAAKtB,MAAL,CAAYI,gBAAZ,GAA+B,CAA/B;AACH;AACD,6BAAKsB,gBAAL;AACH;;;;cAjE2C/B,S;;;;AAoEhDC,uCAA2B+B,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector)  {\n        super($scope, $injector);\n\n        this.scope = $scope;\n\n        this.target.type = this.target.type || 'timeserie';\n\n        this.target.senTarget = this.target.senTarget || 'select sensor';\n        this.allSensors  = {};\n        this.target.selectedSensorId = this.target.selectedSensorId || 0;\n\n        this.target.dsTarget = this.target.dsTarget || 'select metric';\n        this.target.datastreamID = this.target.datastreamID || 0;\n        this.allDataSources  = {};\n    }\n\n    sleep(delay) {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay){\n\n        };\n    }\n\n\n    getOptions(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Sensors(\"+this.target.selectedSensorId+\")/Datastreams\").then((result)=>{\n            self.allDataSources = result;\n            return result;\n        });\n    }\n\n    getSensors(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),\"/Sensors\").then((result)=>{\n            self.allSensors = result;\n            return result;\n        });\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    onChangeInternal(query) {\n        let selectedDataSource =_.find(this.allDataSources, { 'value' : this.target.dsTarget });\n        if (selectedDataSource) {\n            this.target.datastreamID = selectedDataSource.id ;\n        } else {\n            this.target.datastreamID = 0 ;\n        }\n        this.panelCtrl.refresh();\n    }\n\n    onSensorChange(query) {\n        this.target.dsTarget = \"select metric\";\n        let selectedSensor =_.find(this.allSensors, { 'value' : this.target.senTarget });\n        if (selectedSensor) {\n            this.target.selectedSensorId = selectedSensor.id ;\n        } else {\n            this.target.selectedSensorId = 0 ;\n        }\n        this.onChangeInternal();\n    }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
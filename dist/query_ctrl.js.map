{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","appEvents","AlertSrv","GenericDatasourceQueryCtrl","$scope","$injector","alertSrv","scope","notificationShowTime","target","panelType","ctrl","panel","type","mapPanelName","selectedDatastreamId","selectedDatastreamName","selectedDatastreamDirty","selectedDatastreamObservationType","allDataSources","selectedSensorId","selectedSensorName","selectedSensorDirty","allSensors","selectedThingId","selectedThingName","selectedThingDirty","allThings","selectedLocationId","selectedLocationName","selectedLocationDirty","allLocations","panelCtrl","events","on","onDataReceived","bind","onDataError","jsonQuery","set","dataList","lastQueryError","err","handleQueryCtrlError","query","refId","error","data","message","targetTypes","push","rawQuery","isOmObservationType","self","datasource","metricFindQuery","then","result","catch","sensor","_","find","console","log","text","resetDataSource","targetUrl","value","getFormatedId","id","Number","isInteger","isNaN","datastream","toLowerCase","refresh","isEmpty","includes","thing","location","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,qB,kBAAAA,S;;AAGCC,qB,gBAAAA,S;AACAC,oB,gBAAAA,Q;;;;;;;;;;;;;;;;;;;;;kDAEIC,0B;;;AAET,oDAAYC,MAAZ,EAAoBC,SAApB,EAA8BC,QAA9B,EAAyC;AAAA;;AAAA,wKAE/BF,MAF+B,EAEvBC,SAFuB;;AAIrC,0BAAKE,KAAL,GAAaH,MAAb;AACA,0BAAKE,QAAL,GAAgBA,QAAhB;AACA,0BAAKE,oBAAL,GAA4B,IAA5B;;AAEA,0BAAKC,MAAL,CAAYC,SAAZ,GAAwB,MAAKH,KAAL,CAAWI,IAAX,CAAgBC,KAAhB,CAAsBC,IAA9C;;AAEA,0BAAKJ,MAAL,CAAYI,IAAZ,GAAmB,MAAKJ,MAAL,CAAYI,IAAZ,IAAoB,SAAvC;;AAEA,0BAAKC,YAAL,GAAoB,mBAApB;;AAEA;AACA,0BAAKL,MAAL,CAAYM,oBAAZ,GAAmC,MAAKN,MAAL,CAAYM,oBAAZ,IAAoC,CAAvE;AACA,0BAAKN,MAAL,CAAYO,sBAAZ,GAAqC,MAAKP,MAAL,CAAYO,sBAAZ,IAAsC,qBAA3E;AACA,0BAAKP,MAAL,CAAYQ,uBAAZ,GAAsC,MAAKR,MAAL,CAAYQ,uBAAZ,IAAuC,KAA7E;AACA,0BAAKR,MAAL,CAAYS,iCAAZ,GAAgD,MAAKT,MAAL,CAAYS,iCAAZ,IAAiD,EAAjG;AACA,0BAAKC,cAAL,GAAuB,EAAvB;AACA;AACA,0BAAKV,MAAL,CAAYW,gBAAZ,GAA+B,MAAKX,MAAL,CAAYW,gBAAZ,IAAgC,CAA/D;AACA,0BAAKX,MAAL,CAAYY,kBAAZ,GAAiC,MAAKZ,MAAL,CAAYY,kBAAZ,IAAkC,iBAAnE;AACA,0BAAKZ,MAAL,CAAYa,mBAAZ,GAAkC,MAAKb,MAAL,CAAYa,mBAAZ,IAAmC,KAArE;AACA,0BAAKC,UAAL,GAAmB,EAAnB;AACA;AACA,0BAAKd,MAAL,CAAYe,eAAZ,GAA8B,MAAKf,MAAL,CAAYe,eAAZ,IAA+B,CAA7D;AACA,0BAAKf,MAAL,CAAYgB,iBAAZ,GAAgC,MAAKhB,MAAL,CAAYgB,iBAAZ,IAAiC,gBAAjE;AACA,0BAAKhB,MAAL,CAAYiB,kBAAZ,GAAiC,MAAKjB,MAAL,CAAYiB,kBAAZ,IAAkC,KAAnE;AACA,0BAAKC,SAAL,GAAkB,EAAlB;AACA;AACA,0BAAKlB,MAAL,CAAYmB,kBAAZ,GAAiC,MAAKnB,MAAL,CAAYmB,kBAAZ,IAAkC,CAAnE;AACA,0BAAKnB,MAAL,CAAYoB,oBAAZ,GAAmC,MAAKpB,MAAL,CAAYoB,oBAAZ,IAAoC,mBAAvE;AACA,0BAAKpB,MAAL,CAAYqB,qBAAZ,GAAoC,MAAKrB,MAAL,CAAYqB,qBAAZ,IAAqC,KAAzE;AACA,0BAAKC,YAAL,GAAoB,EAApB;;AAEA,0BAAKC,SAAL,CAAeC,MAAf,CAAsBC,EAAtB,CAAyB,eAAzB,EAA0C,MAAKC,cAAL,CAAoBC,IAApB,OAA1C,EAA0EhC,MAA1E;AACA,0BAAK4B,SAAL,CAAeC,MAAf,CAAsBC,EAAtB,CAAyB,YAAzB,EAAuC,MAAKG,WAAL,CAAiBD,IAAjB,OAAvC,EAAoEhC,MAApE;;AAEA,0BAAKK,MAAL,CAAY6B,SAAZ,GAAwB,MAAK7B,MAAL,CAAY6B,SAAZ,IAAyB,EAAjD;AACA;;AAEA,wBAAI,MAAK7B,MAAL,CAAYiB,kBAAhB,EAAoC;AAChC,8BAAKpB,QAAL,CAAciC,GAAd,CAAkB,iBAAlB,EAAqC,MAAK9B,MAAL,CAAYe,eAAZ,GAA8B,4BAAnE,EAAiG,OAAjG,EAA0G,MAAKhB,oBAA/G;AACH;;AAED,wBAAI,MAAKC,MAAL,CAAYa,mBAAhB,EAAqC;AACjC,8BAAKhB,QAAL,CAAciC,GAAd,CAAkB,kBAAlB,EAAsC,MAAK9B,MAAL,CAAYW,gBAAZ,GAA+B,6BAArE,EAAoG,OAApG,EAA6G,MAAKZ,oBAAlH;AACH;;AAED,wBAAI,MAAKC,MAAL,CAAYQ,uBAAhB,EAAyC;AACrC,8BAAKX,QAAL,CAAciC,GAAd,CAAkB,sBAAlB,EAA0C,MAAK9B,MAAL,CAAYO,sBAAZ,GAAqC,iCAA/E,EAAkH,OAAlH,EAA2H,MAAKR,oBAAhI;AACH;;AAED,wBAAI,MAAKC,MAAL,CAAYqB,qBAAhB,EAAuC;AACnC,8BAAKxB,QAAL,CAAciC,GAAd,CAAkB,oBAAlB,EAAwC,MAAK9B,MAAL,CAAYmB,kBAAZ,GAAiC,+BAAzE,EAA0G,OAA1G,EAAmH,MAAKpB,oBAAxH;AACH;;AAxDoC;AA0DxC;;;;mDAEcgC,Q,EAAU;AACrB,6BAAKC,cAAL,GAAsB,IAAtB;AACH;;;gDAEWC,G,EAAK;AACb,6BAAKC,oBAAL,CAA0BD,GAA1B;AACH;;;yDAEoBA,G,EAAK;AACtB,4BAAIA,IAAIE,KAAJ,IAAaF,IAAIE,KAAJ,CAAUC,KAAvB,IAAgCH,IAAIE,KAAJ,CAAUC,KAAV,KAAoB,KAAKpC,MAAL,CAAYoC,KAApE,EAA2E;AACvE;AACH;;AAED,4BAAIH,IAAII,KAAJ,IAAaJ,IAAII,KAAJ,CAAUC,IAAvB,IAA+BL,IAAII,KAAJ,CAAUC,IAAV,CAAeD,KAAlD,EAAyD;AACrD,iCAAKL,cAAL,GAAsBC,IAAII,KAAJ,CAAUC,IAAV,CAAeD,KAAf,CAAqBE,OAA3C;AACH,yBAFD,MAEO,IAAIN,IAAII,KAAJ,IAAaJ,IAAII,KAAJ,CAAUC,IAA3B,EAAiC;AACpC,iCAAKN,cAAL,GAAsBC,IAAII,KAAJ,CAAUC,IAAV,CAAeC,OAArC;AACH,yBAFM,MAEA,IAAIN,IAAIK,IAAJ,IAAYL,IAAIK,IAAJ,CAASD,KAAzB,EAAgC;AACnC,iCAAKL,cAAL,GAAsBC,IAAIK,IAAJ,CAASD,KAAT,CAAeE,OAArC;AACH,yBAFM,MAEA,IAAIN,IAAIK,IAAJ,IAAYL,IAAIK,IAAJ,CAASC,OAAzB,EAAkC;AACrC,iCAAKP,cAAL,GAAsBC,IAAIK,IAAJ,CAASC,OAA/B;AACH,yBAFM,MAEA;AACH,iCAAKP,cAAL,GAAsBC,GAAtB;AACH;AACJ;;;qDAEgB;AACb,4BAAIO,cAAc,CAAC,SAAD,EAAY,QAAZ,CAAlB;AACA,4BAAI,KAAKxC,MAAL,CAAYC,SAAZ,KAA0B,OAA9B,EAAuC;AACnCuC,wCAAYC,IAAZ,CAAiB,WAAjB,EAA6B,sBAA7B;AACH;AACD,+BAAOD,WAAP;AACH;;;uDAEiB;AACd,+BAAQ,KAAKxC,MAAL,CAAYC,SAAZ,KAA0B,KAAKI,YAAvC;AACH;;;uDAEkB;AACf,6BAAKL,MAAL,CAAY0C,QAAZ,GAAuB,CAAC,KAAK1C,MAAL,CAAY0C,QAApC;AACH;;;kDAIY;AACT,+BAAO,KAAK1C,MAAL,CAAYI,IAAZ,KAAqB,SAArB,IACE,KAAKJ,MAAL,CAAYC,SAAZ,KAA0B,KAAKI,YADxC;AAEH;;;mDAEcD,I,EAAM;AACjB,4BAAG,CAAC,KAAKuC,mBAAL,CAAyBvC,IAAzB,CAAJ,EAAmC;AAC/B,iCAAKP,QAAL,CAAciC,GAAd,CAAkB,8BAAlB,EAAkD,uEAAlD,EAA4H,SAA5H,EAAuI,KAAK/B,oBAA5I;AACH;AACJ;;;+CAEUoC,K,EAAO;AACd,4BAAIS,OAAO,IAAX;AACA,+BAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAiCX,SAAS,EAA1C,EAA8C,UAA9C,EAAyD,QAAzD,EAAmEY,IAAnE,CAAwE,UAACC,MAAD,EAAU;AACrFJ,iCAAK9B,UAAL,GAAkBkC,MAAlB;AACA,mCAAOA,MAAP;AACH,yBAHM,EAGJC,KAHI,CAGE,KAAKf,oBAAL,CAA0BP,IAA1B,CAA+B,IAA/B,CAHF,CAAP;AAIH;;;mDAEcQ,K,EAAMxB,gB,EAAkB;AACnC,4BAAIuC,SAASC,EAAEC,IAAF,CAAO,KAAKtC,UAAZ,EAAwB,EAAE,SAAU,KAAKd,MAAL,CAAYW,gBAAxB,EAAxB,CAAb;AACA0C,gCAAQC,GAAR,CAAY,kBAAZ;;AAEA,4BAAGJ,MAAH,EAAW;AACP,iCAAKlD,MAAL,CAAYY,kBAAZ,GAAiCsC,OAAOK,IAAxC;AACA,iCAAKvD,MAAL,CAAYa,mBAAZ,GAAkC,KAAlC;AACH,yBAHD,MAGO;AACH,iCAAKb,MAAL,CAAYa,mBAAZ,GAAkC,IAAlC;AACA,iCAAKb,MAAL,CAAYM,oBAAZ,GAAmC,CAAnC;AACA,iCAAKT,QAAL,CAAciC,GAAd,CAAkB,kBAAlB,EAAsC,KAAK9B,MAAL,CAAYW,gBAAZ,GAA+B,6BAArE,EAAoG,OAApG,EAA6G,KAAKZ,oBAAlH;AACH;AACD,6BAAKyD,eAAL;AACH;;;sDAIgB;AACb,+BAAO,CAAC,KAAKxD,MAAL,CAAYW,gBAAZ,KAAiC,CAAjC,IAAsC,KAAKX,MAAL,CAAYe,eAAZ,KAAgC,CAAvE,MACE,KAAKf,MAAL,CAAYI,IAAZ,KAAqB,SAArB,IAAkC,KAAKJ,MAAL,CAAYI,IAAZ,KAAqB,QADzD,KAEE,KAAKJ,MAAL,CAAYC,SAAZ,KAA0B,KAAKI,YAFxC;AAGH;;;mDAEc8B,K,EAAO;AAClB,4BAAIS,OAAO,IAAX;AACA,4BAAIa,YAAY,EAAhB;AACA,4BAAI,KAAKzD,MAAL,CAAYiB,kBAAZ,IAAkC,KAAKjB,MAAL,CAAYa,mBAAlD,EAAuE;AACnE,mCAAO,CAAC;AACJ0C,sCAAM,qBADF;AAEJG,uCAAO;AAFH,6BAAD,CAAP;AAIH;AACD,4BAAI,KAAK1D,MAAL,CAAYI,IAAZ,KAAqB,SAAzB,EAAoC;AAChCqD,wCAAY,cAAY,KAAKE,aAAL,CAAmB,KAAK3D,MAAL,CAAYW,gBAA/B,CAAZ,GAA6D,eAAzE;AACH,yBAFD,MAEO;AACH8C,wCAAY,aAAW,KAAKE,aAAL,CAAmB,KAAK3D,MAAL,CAAYe,eAA/B,CAAX,GAA2D,eAAvE;AACH;AACD,+BAAO,KAAK8B,UAAL,CAAgBC,eAAhB,CAAiCX,SAAS,EAA1C,EAA8CsB,SAA9C,EAAwD,YAAxD,EAAsEV,IAAtE,CAA2E,UAACC,MAAD,EAAU;AACxFJ,iCAAKlC,cAAL,GAAsBsC,MAAtB;AACA,mCAAOA,MAAP;AACH,yBAHM,EAGJC,KAHI,CAGE,KAAKf,oBAAL,CAA0BP,IAA1B,CAA+B,IAA/B,CAHF,CAAP;AAIH;;;kDAEaiC,E,EAAI;AACd,+BAAQC,OAAOC,SAAP,CAAiBF,EAAjB,KAAwB,CAACG,MAAMH,EAAN,CAA1B,GAAuCA,EAAvC,GAA4C,MAAIA,EAAJ,GAAO,GAA1D;AACH;;;uDAEkBzB,K,EAAO;AACtB,4BAAI,KAAKnC,MAAL,CAAYiB,kBAAZ,IAAkC,KAAKjB,MAAL,CAAYa,mBAAlD,EAAuE;AACnE;AACH;;AAED,4BAAImD,aAAab,EAAEC,IAAF,CAAO,KAAK1C,cAAZ,EAA4B,EAAE,SAAU,KAAKV,MAAL,CAAYM,oBAAxB,EAA5B,CAAjB;;AAEA,4BAAG0D,UAAH,EAAe;AACX,iCAAKhE,MAAL,CAAYO,sBAAZ,GAAqCyD,WAAWT,IAAhD;AACA,iCAAKvD,MAAL,CAAYS,iCAAZ,GAAgDuD,WAAW5D,IAAX,CAAgB6D,WAAhB,EAAhD;AACA,iCAAKjE,MAAL,CAAYQ,uBAAZ,GAAsC,KAAtC;AACH,yBAJD,MAIO;AACH,iCAAKR,MAAL,CAAYQ,uBAAZ,GAAsC,IAAtC;AACA,iCAAKR,MAAL,CAAYO,sBAAZ,GAAqC,KAAKP,MAAL,CAAYM,oBAAjD;AACA,iCAAKN,MAAL,CAAYS,iCAAZ,GAAgD,EAAhD;AACA,iCAAKZ,QAAL,CAAciC,GAAd,CAAkB,sBAAlB,EAA0C,KAAK9B,MAAL,CAAYO,sBAAZ,GAAqC,iCAA/E,EAAkH,OAAlH,EAA2H,KAAKR,oBAAhI;AACH;;AAED,4BAAI,KAAK4C,mBAAL,CAAyB,KAAK3C,MAAL,CAAYS,iCAArC,CAAJ,EAA6E,CAE5E,CAFD,MAEO;AACH,iCAAKc,SAAL,CAAe2C,OAAf;AACH;AACJ;;;wDAEmB;AAChB,6BAAK3C,SAAL,CAAe2C,OAAf;AACH;;;oDAEe;AACZ,+BAAQ,KAAKlE,MAAL,CAAYM,oBAAZ,KAAqC,CAAtC,KACE,KAAKN,MAAL,CAAYI,IAAZ,KAAqB,SAArB,IAAkC,KAAKJ,MAAL,CAAYI,IAAZ,KAAqB,QADzD,KAEE,KAAKJ,MAAL,CAAYC,SAAZ,KAA0B,KAAKI,YAFxC;AAGH;;;wDAEmBD,I,EAAM;AACtB,4BAAI+C,EAAEgB,OAAF,CAAU/D,IAAV,KAAmB,CAACA,KAAKgE,QAAL,CAAc,gBAAd,CAAxB,EAAyD;AACrD,iCAAKpE,MAAL,CAAY6B,SAAZ,GAAwB,EAAxB;AACA,mCAAO,KAAP;AACH;AACD,+BAAO,IAAP;AACH;;;sDAEgB;AACb,6BAAK7B,MAAL,CAAYM,oBAAZ,GAAmC,CAAnC;AACA,6BAAKN,MAAL,CAAYO,sBAAZ,GAAqC,qBAArC;AACA,6BAAKgB,SAAL,CAAe2C,OAAf;AACH;;;gDAGW9D,I,EAAM;AACd,6BAAKJ,MAAL,CAAYW,gBAAZ,GAA+B,CAA/B;AACA,6BAAKX,MAAL,CAAYe,eAAZ,GAA8B,CAA9B;AACA,6BAAKyC,eAAL;AACH;;;iDAGW;AACR,+BAAO,KAAKxD,MAAL,CAAYI,IAAZ,KAAqB,QAArB,IAAiC,KAAKJ,MAAL,CAAYI,IAAZ,KAAqB,sBAAtD,IAAiF,KAAKJ,MAAL,CAAYC,SAAZ,KAA0B,KAAKI,YAAvH;AACH;;;8CAES8B,K,EAAO;AACb,4BAAIS,OAAO,IAAX;AACA,+BAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAiCX,SAAS,EAA1C,EAA8C,SAA9C,EAAwD,OAAxD,EAAiEY,IAAjE,CAAsE,UAACC,MAAD,EAAU;AACnFJ,iCAAK1B,SAAL,GAAiB8B,MAAjB;AACA,mCAAOA,MAAP;AACH,yBAHM,EAGJC,KAHI,CAGE,KAAKf,oBAAL,CAA0BP,IAA1B,CAA+B,IAA/B,CAHF,CAAP;AAIH;;;kDAEaQ,K,EAAO;;AAEjB,4BAAIkC,QAAQlB,EAAEC,IAAF,CAAO,KAAKlC,SAAZ,EAAuB,EAAE,SAAU,KAAKlB,MAAL,CAAYe,eAAxB,EAAvB,CAAZ;AACA,4BAAGsD,KAAH,EAAU;AACN,iCAAKrE,MAAL,CAAYgB,iBAAZ,GAAgCqD,MAAMd,IAAtC;AACA,iCAAKvD,MAAL,CAAYiB,kBAAZ,GAAiC,KAAjC;AACH,yBAHD,MAGO;AACH,iCAAKjB,MAAL,CAAYiB,kBAAZ,GAAiC,IAAjC;AACA,iCAAKjB,MAAL,CAAYM,oBAAZ,GAAmC,CAAnC;AACA,iCAAKT,QAAL,CAAciC,GAAd,CAAkB,iBAAlB,EAAqC,KAAK9B,MAAL,CAAYe,eAAZ,GAA8B,4BAAnE,EAAiG,OAAjG,EAA0G,KAAKhB,oBAA/G;AACH;AACD,6BAAKyD,eAAL;AACH;;;oDAIc;AACX,+BAAO,KAAKxD,MAAL,CAAYI,IAAZ,KAAqB,WAA5B;AACH;;;iDAEY+B,K,EAAO;AAChB,4BAAIS,OAAO,IAAX;AACA,+BAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAiCX,SAAS,EAA1C,EAA8C,YAA9C,EAA2D,UAA3D,EAAuEY,IAAvE,CAA4E,UAACC,MAAD,EAAU;AACzFJ,iCAAKtB,YAAL,GAAoB0B,MAApB;AACA,mCAAOA,MAAP;AACH,yBAHM,EAGJC,KAHI,CAGE,KAAKf,oBAAL,CAA0BP,IAA1B,CAA+B,IAA/B,CAHF,CAAP;AAIH;;;qDAEgBQ,K,EAAO;AACpB;AACA,4BAAImC,WAAWnB,EAAEC,IAAF,CAAO,KAAK9B,YAAZ,EAA0B,EAAE,SAAU,KAAKtB,MAAL,CAAYmB,kBAAxB,EAA1B,CAAf;;AAEA,4BAAImD,QAAJ,EAAc;AACV,iCAAKtE,MAAL,CAAYoB,oBAAZ,GAAmCkD,SAASf,IAA5C;AACA,iCAAKvD,MAAL,CAAYqB,qBAAZ,GAAoC,KAApC;AACH,yBAHD,MAGO;AACH,iCAAKrB,MAAL,CAAYqB,qBAAZ,GAAoC,IAApC;AACA,iCAAKxB,QAAL,CAAciC,GAAd,CAAkB,oBAAlB,EAAwC,KAAK9B,MAAL,CAAYmB,kBAAZ,GAAiC,+BAAzE,EAA0G,OAA1G,EAAmH,KAAKpB,oBAAxH;AACH;;AAED,6BAAKwB,SAAL,CAAe2C,OAAf;AACH;;;;cA1R2C3E,S;;;;AA+RhDG,uCAA2B6E,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nimport { appEvents} from 'app/core/core';\nimport { AlertSrv} from 'app/core/core';\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector,alertSrv)  {\n\n        super($scope, $injector);\n\n        this.scope = $scope;\n        this.alertSrv = alertSrv;\n        this.notificationShowTime = 5000;\n\n        this.target.panelType = this.scope.ctrl.panel.type;\n\n        this.target.type = this.target.type || 'Sensors';\n\n        this.mapPanelName = 'grafana-map-panel';\n\n        // datastream init\n        this.target.selectedDatastreamId = this.target.selectedDatastreamId || 0;\n        this.target.selectedDatastreamName = this.target.selectedDatastreamName || 'select a datastream';\n        this.target.selectedDatastreamDirty = this.target.selectedDatastreamDirty || false;\n        this.target.selectedDatastreamObservationType = this.target.selectedDatastreamObservationType || '';\n        this.allDataSources  = {};\n        // sensor init\n        this.target.selectedSensorId = this.target.selectedSensorId || 0;\n        this.target.selectedSensorName = this.target.selectedSensorName || 'select a sensor';\n        this.target.selectedSensorDirty = this.target.selectedSensorDirty || false;\n        this.allSensors  = {};\n        // thing init start\n        this.target.selectedThingId = this.target.selectedThingId || 0;\n        this.target.selectedThingName = this.target.selectedThingName || 'select a thing';\n        this.target.selectedThingDirty = this.target.selectedThingDirty || false;\n        this.allThings  = {};\n        // location init start\n        this.target.selectedLocationId = this.target.selectedLocationId || 0;\n        this.target.selectedLocationName = this.target.selectedLocationName || 'select a location';\n        this.target.selectedLocationDirty = this.target.selectedLocationDirty || false;\n        this.allLocations = {};\n\n        this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n        this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n\n        this.target.jsonQuery = this.target.jsonQuery || '';\n        // appEvents.emit('alert-success', ['Test notification sent', '']);\n\n        if (this.target.selectedThingDirty) {\n            this.alertSrv.set('Thing Not Found', this.target.selectedThingId + ' is not a valid thing name', 'error', this.notificationShowTime);\n        }\n\n        if (this.target.selectedSensorDirty) {\n            this.alertSrv.set('Sensor Not Found', this.target.selectedSensorId + ' is not a valid sensor name', 'error', this.notificationShowTime);\n        }\n\n        if (this.target.selectedDatastreamDirty) {\n            this.alertSrv.set('Datastream Not Found', this.target.selectedDatastreamName + ' is not a valid datastream name', 'error', this.notificationShowTime);\n        }\n\n        if (this.target.selectedLocationDirty) {\n            this.alertSrv.set('Location Not Found', this.target.selectedLocationId + ' is not a valid location name', 'error', this.notificationShowTime);\n        }\n\n    }\n\n    onDataReceived(dataList) {\n        this.lastQueryError = null;\n    }\n\n    onDataError(err) {\n        this.handleQueryCtrlError(err);\n    }\n\n    handleQueryCtrlError(err) {\n        if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\n            return;\n        }\n\n        if (err.error && err.error.data && err.error.data.error) {\n            this.lastQueryError = err.error.data.error.message;\n        } else if (err.error && err.error.data) {\n            this.lastQueryError = err.error.data.message;\n        } else if (err.data && err.data.error) {\n            this.lastQueryError = err.data.error.message;\n        } else if (err.data && err.data.message) {\n            this.lastQueryError = err.data.message;\n        } else {\n            this.lastQueryError = err;\n        }\n    }\n\n    getTargetTypes() {\n        let targetTypes = ['Sensors', 'Things'];\n        if (this.target.panelType === 'table') {\n            targetTypes.push('Locations','Historical Locations');\n        }\n        return targetTypes;\n    }\n\n    showControlTypes(){\n        return (this.target.panelType !== this.mapPanelName);\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n\n    //sensor starts\n    showSensors(){\n        return this.target.type === 'Sensors' &&\n                (this.target.panelType !== this.mapPanelName);\n    }\n\n    jsonQueryClick(type) {\n        if(!this.isOmObservationType(type)){\n            this.alertSrv.set('Unsupported Observation Type', 'JSONPath only works when Datastream.observationType is OM_Observation' , 'warning', this.notificationShowTime);\n        }\n    }\n\n    getSensors(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),'/Sensors','sensor').then((result)=>{\n            self.allSensors = result;\n            return result;\n        }).catch(this.handleQueryCtrlError.bind(this));\n    }\n\n    onSensorChange(query,selectedSensorId) {\n        let sensor = _.find(this.allSensors, { 'value' : this.target.selectedSensorId });\n        console.log('find all sensors');\n\n        if(sensor) {\n            this.target.selectedSensorName = sensor.text;\n            this.target.selectedSensorDirty = false;\n        } else {\n            this.target.selectedSensorDirty = true;\n            this.target.selectedDatastreamId = 0;\n            this.alertSrv.set('Sensor Not Found', this.target.selectedSensorId + ' is not a valid sensor name', 'error', this.notificationShowTime);\n        }\n        this.resetDataSource();\n    }\n    //sensor ends\n\n    //datastream starts\n    showDatastreams(){\n        return (this.target.selectedSensorId !== 0 || this.target.selectedThingId !== 0) &&\n                (this.target.type === 'Sensors' || this.target.type === 'Things') &&\n                (this.target.panelType !== this.mapPanelName);\n    }\n// TODO: show errors below each query editor\n    getDataStreams(query) {\n        let self = this;\n        let targetUrl = '';\n        if (this.target.selectedThingDirty || this.target.selectedSensorDirty) {\n            return [{\n                text: 'select a datastream',\n                value: 0\n            }];\n        }\n        if (this.target.type === 'Sensors') {\n            targetUrl = '/Sensors('+this.getFormatedId(this.target.selectedSensorId)+')/Datastreams';\n        } else {\n            targetUrl = '/Things('+this.getFormatedId(this.target.selectedThingId)+')/Datastreams';\n        }\n        return this.datasource.metricFindQuery((query || ''),targetUrl,'datastream').then((result)=>{\n            self.allDataSources = result;\n            return result;\n        }).catch(this.handleQueryCtrlError.bind(this));\n    }\n\n    getFormatedId(id) {\n        return (Number.isInteger(id) || !isNaN(id)) ? id : '\"'+id+'\"';\n    }\n\n    onDataStreamChange(query) {\n        if (this.target.selectedThingDirty || this.target.selectedSensorDirty) {\n            return;\n        }\n\n        let datastream = _.find(this.allDataSources, { 'value' : this.target.selectedDatastreamId });\n\n        if(datastream) {\n            this.target.selectedDatastreamName = datastream.text;\n            this.target.selectedDatastreamObservationType = datastream.type.toLowerCase();\n            this.target.selectedDatastreamDirty = false;\n        } else {\n            this.target.selectedDatastreamDirty = true;\n            this.target.selectedDatastreamName = this.target.selectedDatastreamId;\n            this.target.selectedDatastreamObservationType = '';\n            this.alertSrv.set('Datastream Not Found', this.target.selectedDatastreamName + ' is not a valid datastream name', 'error', this.notificationShowTime);\n        }\n\n        if (this.isOmObservationType(this.target.selectedDatastreamObservationType)) {\n\n        } else {\n            this.panelCtrl.refresh();\n        }\n    }\n\n    onJsonQueryChange() {\n        this.panelCtrl.refresh();\n    }\n\n    showJsonQuery() {\n        return (this.target.selectedDatastreamId !== 0) &&\n                (this.target.type === 'Sensors' || this.target.type === 'Things') &&\n                (this.target.panelType !== this.mapPanelName);\n    }\n\n    isOmObservationType(type) {\n        if (_.isEmpty(type) || !type.includes('om_observation')) {\n            this.target.jsonQuery = '';\n            return false;\n        }\n        return true;\n    }\n\n    resetDataSource(){\n        this.target.selectedDatastreamId = 0;\n        this.target.selectedDatastreamName = 'select a datastream';\n        this.panelCtrl.refresh();\n    }\n    //datastream ends\n\n    typeChanged(type) {\n        this.target.selectedSensorId = 0;\n        this.target.selectedThingId = 0;\n        this.resetDataSource();\n    }\n\n    //thing starts\n    showThings(){\n        return this.target.type === 'Things' || this.target.type === 'Historical Locations' || (this.target.panelType === this.mapPanelName);\n    }\n\n    getThings(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),'/Things','thing').then((result)=>{\n            self.allThings = result;\n            return result;\n        }).catch(this.handleQueryCtrlError.bind(this));\n    }\n\n    onThingChange(query) {\n\n        let thing = _.find(this.allThings, { 'value' : this.target.selectedThingId });\n        if(thing) {\n            this.target.selectedThingName = thing.text;\n            this.target.selectedThingDirty = false;\n        } else {\n            this.target.selectedThingDirty = true;\n            this.target.selectedDatastreamId = 0;\n            this.alertSrv.set('Thing Not Found', this.target.selectedThingId + ' is not a valid thing name', 'error', this.notificationShowTime);\n        }\n        this.resetDataSource();\n    }\n    //thing ends\n\n    //location starts\n    showLocations(){\n        return this.target.type === 'Locations';\n    }\n\n    getLocations(query) {\n        let self = this;\n        return this.datasource.metricFindQuery((query || ''),'/Locations','location').then((result)=>{\n            self.allLocations = result;\n            return result;\n        }).catch(this.handleQueryCtrlError.bind(this));\n    }\n\n    onLocationChange(query) {\n        // find and store the selected location name to use it as column name (refer datasource.js->transformThings())\n        let location = _.find(this.allLocations, { 'value' : this.target.selectedLocationId });\n\n        if (location) {\n            this.target.selectedLocationName = location.text;\n            this.target.selectedLocationDirty = false;\n        } else {\n            this.target.selectedLocationDirty = true;\n            this.alertSrv.set('Location Not Found', this.target.selectedLocationId + ' is not a valid location name', 'error', this.notificationShowTime);\n        }\n\n        this.panelCtrl.refresh();\n    }\n    //location ends\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","type","ogcType","ogcUrl","datastreamID","allDataSources","delay","start","Date","getTime","query","metricTypes","self","datasource","metricFindQuery","then","result","rawQuery","selectedDataSource","_","find","text","id","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;4CAGKC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAAgC;AAAA;;AAAA,8JACxBD,MADwB,EAChBC,SADgB;;AAG9B,gBAAKC,KAAL,GAAaF,MAAb;AACA,gBAAKG,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAA3C;AACA,gBAAKA,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,IAAoB,WAAvC;AACA,gBAAKD,MAAL,CAAYE,OAAZ,GAAsB,MAAKF,MAAL,CAAYE,OAAZ,IAAuB,EAA7C;AACA,gBAAKF,MAAL,CAAYG,MAAZ,GAAqB,MAAKH,MAAL,CAAYG,MAAZ,IAAsB,EAA3C;AACA,gBAAKH,MAAL,CAAYI,YAAZ,GAA2B,CAA3B;AACA,gBAAKC,cAAL,GAAuB,EAAvB;AAT8B;AAU/B;;;;gCAEKC,K,EAAO;AACX,gBAAIC,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,mBAAO,IAAID,IAAJ,GAAWC,OAAX,KAAuBF,QAAQD,KAAtC,EAA4C,CAE3C;AACF;;;qCAEUI,K,EAAMR,O,EAAS;AACxB,gBAAIS,cAAc;AAChB,yBAAY,UADI;AAEhB,6BAAgB;AAFA,aAAlB;AAIA,gBAAIC,OAAO,IAAX;AACA,iBAAKZ,MAAL,CAAYE,OAAZ,GAAsBA,OAAtB;AACA,iBAAKF,MAAL,CAAYG,MAAZ,GAAqBQ,YAAYT,OAAZ,CAArB;AACA,mBAAO,KAAKW,UAAL,CAAgBC,eAAhB,CAAiCJ,SAAS,EAA1C,EAA8CC,YAAYT,OAAZ,CAA9C,EAAoEa,IAApE,CAAyE,UAACC,MAAD,EAAU;AACxFJ,mBAAKP,cAAL,GAAsBW,MAAtB;AACA,qBAAOA,MAAP;AACD,aAHM,CAAP;AAID;;;6CAEkB;AACjB,iBAAKhB,MAAL,CAAYiB,QAAZ,GAAuB,CAAC,KAAKjB,MAAL,CAAYiB,QAApC;AACD;;;2CAEgBP,K,EAAO;AACtB,gBAAIQ,qBAAoBC,EAAEC,IAAF,CAAO,KAAKf,cAAZ,EAA4B,EAAE,MAAO,KAAKL,MAAL,CAAYA,MAArB,EAA5B,CAAxB;AACA,iBAAKA,MAAL,CAAYA,MAAZ,GAAqBkB,mBAAmBG,IAAxC;AACA,iBAAKrB,MAAL,CAAYI,YAAZ,GAA2Bc,mBAAmBI,EAA9C;AACA,iBAAKC,SAAL,CAAeC,OAAf,GAJsB,CAII;AAC3B;;;;QA5C6C7B,S;;;;AA+ChDC,iCAA2B6B,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || 'timeserie';\n    this.target.ogcType = this.target.ogcType || \"\";\n    this.target.ogcUrl = this.target.ogcUrl || \"\";\n    this.target.datastreamID = 0;\n    this.allDataSources  = {};\n  }\n\n  sleep(delay) {\n    var start = new Date().getTime();\n    while (new Date().getTime() < start + delay){\n\n    };\n  }\n\n  getOptions(query,ogcType) {\n    let metricTypes = {\n      'sensors' : \"/Sensors\",\n      'datastreams' : \"/Datastreams\",\n    };\n    let self = this;\n    this.target.ogcType = ogcType;\n    this.target.ogcUrl = metricTypes[ogcType];\n    return this.datasource.metricFindQuery((query || ''),metricTypes[ogcType]).then((result)=>{\n      self.allDataSources = result;\n      return result;\n    });\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal(query) {\n    let selectedDataSource =_.find(this.allDataSources, { 'id' : this.target.target });\n    this.target.target = selectedDataSource.text ;\n    this.target.datastreamID = selectedDataSource.id ;\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}
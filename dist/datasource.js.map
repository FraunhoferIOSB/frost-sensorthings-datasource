{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","console","log","allPromises","allTargetResults","data","self","results","forEach","targets","target","targetid","push","doRequest","toString","method","then","response","filtered","map","value","index","result","Date","resultTime","format","bind","Promise","all","values","status","message","title","query","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","suburl","interpolated","mapToTextValue","text","datasourceRequest","filter","scopedVars","refId","hide"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n\n    console.log(options);\n    // var query = this.buildQueryParameters(options);\n    // query.targets = query.targets.filter(t => !t.hide);\n    //\n    // if (query.targets.length <= 0) {\n    //   return this.q.when({data: []});\n    // }\n    //\n    let allPromises = [];\n    let allTargetResults = {data:[]};\n    let self = this;\n    let results = [1,2,3];\n\n\n    _.forEach(options.targets,function(target){\n      let targetid = target.target;\n      allPromises.push(this.doRequest({\n        url: this.url + '/Datastreams('+targetid.toString()+')/Observations',\n        // data: query,\n        method: 'GET'\n      }).then(function(response){\n        // console.log(response.data.value);\n        // let values = response.data.value;\n        let filtered = _.map(response.data.value,function(value,index){\n          return [value.result,moment(new Date(value.resultTime)).format('x')];\n        });\n        // response.data = {\n        //   'target' : 18,\n        //   'datapoints' : filtered\n        // };\n        return {\n          'target' : 18,\n          'datapoints' : filtered\n        };\n      }));\n\n    }.bind(this));\n\n    return Promise.all(allPromises).then(function(values) {\n      // console.log(allTargetResults);\n      _.forEach(values,function(value){\n        // console.log(self.allTargetResults);\n        allTargetResults.data.push(value);\n      });\n      console.log(allTargetResults);\n      return allTargetResults;\n      // console.log(\"resolved all promises\");\n      // console.log(allTargetResults);\n    // return allTargetResults;\n    });\n    // console.log(randdsf);\n    // console.log(allTargetResults);\n    // console.log(allPromises);\n    // return result;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query,suburl) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + suburl,\n      data: interpolated,\n      method: 'GET',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data.value, (data,index) => {\n      return {\n        text: data.name,\n        value: data['@iot.id']\n      };\n    });\n    // return _.map(result.data, (d, i) => {\n    //   if (d && d.text && d.value) {\n    //     return { text: d.text, value: d.value };\n    //   } else if (_.isObject(d)) {\n    //     return { text: d, value: i};\n    //   }\n    //   return { text: d, value: d };\n    // });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n}\n"]}
{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","console","log","query","buildQueryParameters","doRequest","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","data","result","suburl","interpolated","target","mapToTextValue","map","value","index","text","datasourceRequest","targets","filter","scopedVars","refId","hide"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n\n    console.log(options);\n    console.log(\"options\");\n    var query = this.buildQueryParameters(options);\n    // query.targets = query.targets.filter(t => !t.hide);\n    //\n    // if (query.targets.length <= 0) {\n    //   return this.q.when({data: []});\n    // }\n    //\n    // let result = this.doRequest({\n    //   url: this.url + '/query',\n    //   data: query,\n    //   method: 'POST'\n    // });\n    //\n    // // console.log(result);\n    // return result;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      // console.log(result.data);\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query,suburl) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + suburl,\n      data: interpolated,\n      method: 'GET',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data.value, (data,index) => {\n      return {\n        text: data.name,\n        value: data['@iot.id'],\n        // type: data['@iot.selfLink'],\n      };\n    });\n    // return _.map(result.data, (d, i) => {\n    //   if (d && d.text && d.value) {\n    //     return { text: d.text, value: d.value };\n    //   } else if (_.isObject(d)) {\n    //     return { text: d, value: i};\n    //   }\n    //   return { text: d, value: d };\n    // });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n}\n"]}
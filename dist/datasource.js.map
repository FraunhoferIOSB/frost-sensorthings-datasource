{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","JSONPath","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","alertSrv","contextSrv","dashboardSrv","type","url","name","q","withCredentials","headers","notificationShowTime","topCount","basicAuth","length","options","key","from","range","utc","format","to","id","Number","isInteger","isNaN","targets","filter","target","hide","allTargetResults","data","testPromises","map","self","subUrl","thisTargetResult","selectedDatastreamName","toString","selectedDatastreamDirty","selectedLimit","limit","selectedLocationId","timeFilter","getTimeFilter","getFormatedId","selectedThingOption","selectedThingId","selectedDatastreamId","console","log","transformedResults","hasNextLink","fullUrl","response","doRequest","method","has","split","concat","transformThings","value","transformLocations","transformLocationsCoordinates","transformDataSource","datapoints","Promise","all","then","values","error","Array","isArray","locationName","Locations","location","coordinates","geometry","metricColumn","columnMap","columns","text","meta","refId","rows","time","selectedThingName","isOmObservationType","selectedDatastreamObservationType","isEmpty","jsonQuery","index","result","json","path","panelType","JSON","stringify","parseInt","phenomenonTime","datapoint","includes","Thing","forEach","push","status","message","title","query","placeholder","transformedMetrics","selectParam","transformMetrics","metrics","metric","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\n\nimport {JSONPath} from './external/jsonpath.js'; // copied with grunt\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, alertSrv, contextSrv, dashboardSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = { 'Content-Type': 'application/json' };\n    this.alertSrv = alertSrv;\n    this.contextSrv = contextSrv;\n    this.dashboardSrv = dashboardSrv;\n    this.notificationShowTime = 5000;\n    this.topCount = 1000;\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  getTimeFilter(options, key) {\n    let from = options.range.from.utc().format('YYYY-MM-DDTHH:mm:ss.SSS') + 'Z';\n    let to = options.range.to.utc().format('YYYY-MM-DDTHH:mm:ss.SSS') + 'Z';\n    return key + ' gt ' + from + ' and ' + key + ' lt ' + to;\n  }\n\n  getFormatedId(id) {\n    return (Number.isInteger(id) || !isNaN(id)) ? id : '\"' + id + '\"';\n  }\n\n  async query(options) {\n    options.targets = _.filter(options.targets, target => target.hide !== true);\n\n    let allTargetResults = { data: [] };\n\n    let testPromises = options.targets.map(async target => {\n      let self = this;\n      let subUrl = '';\n      let thisTargetResult = {\n        'target' : target.selectedDatastreamName.toString(),\n        'datapoints' : [],\n      };\n\n      if (target.selectedDatastreamDirty) {\n        return thisTargetResult;\n      }\n\n      if(typeof(target.selectedLimit) == \"undefined\") {\n        target.selectedLimit = 1;\n      }\n      let limit = 0;\n\n      if (target.type === \"Locations\") {\n        if (target.selectedLocationId == 0) {\n          return thisTargetResult;\n        }\n        let timeFilter = this.getTimeFilter(options,\"time\");\n        subUrl = `/Locations(${this.getFormatedId(target.selectedLocationId)})/HistoricalLocations?$filter=${timeFilter}&$expand=Things($select=name)&$select=time&$top=${this.topCount}`;\n      } else if(target.type === \"Things\" && target.selectedThingOption === \"Historical Locations\") {\n        if (target.selectedThingId == 0) {\n          return thisTargetResult;\n        }\n        let timeFilter = this.getTimeFilter(options,\"time\");\n        subUrl = `/Things(${this.getFormatedId(target.selectedThingId)})/HistoricalLocations?$filter=${timeFilter}&$expand=Locations($select=name)&$select=time&$top=${target.selectedLimit === 0 ? this.topCount : target.selectedLimit}`;\n        limit = target.selectedLimit;\n      } else if(target.type === \"Things\" && target.selectedThingOption === \"Historical Locations with Coordinates\") {\n        if (target.selectedThingId == 0) {\n          return thisTargetResult;\n        }\n        let timeFilter = this.getTimeFilter(options,\"time\");\n        subUrl = `/Things(${this.getFormatedId(target.selectedThingId)})/HistoricalLocations?$filter=${timeFilter}&$expand=Locations($select=name,location)&$select=time&$top=${target.selectedLimit === 0 ? this.topCount : target.selectedLimit}`;\n        limit = target.selectedLimit;\n      } else {\n        if (target.selectedDatastreamId == 0) {\n          return thisTargetResult;\n        }\n        let timeFilter = this.getTimeFilter(options,\"phenomenonTime\");\n        subUrl = `/Datastreams(${this.getFormatedId(target.selectedDatastreamId)})/Observations?$filter=${timeFilter}&$select=phenomenonTime,result&$orderby=phenomenonTime desc&$top=${this.topCount}`;\n      }\n      console.log(\"subUrl:\", subUrl);\n\n      let transformedResults = [];\n      let hasNextLink = true;\n      let fullUrl = this.url + subUrl;\n\n      while(hasNextLink) {\n        if(transformedResults.length >= limit && limit !== 0) {\n          break;\n        }\n\n        let response = await this.doRequest({\n          url: fullUrl,\n          method: 'GET'\n        });\n\n        hasNextLink = _.has(response.data, \"@iot.nextLink\");\n        if (hasNextLink) {\n          subUrl = subUrl.split('?')[0];\n          fullUrl = this.url + subUrl + \"?\" + response.data[\"@iot.nextLink\"].split('?')[1];\n        }\n\n        if (target.type === \"Locations\") {\n          transformedResults = transformedResults.concat(self.transformThings(target, response.data.value));\n        } else if (target.type === \"Things\" && target.selectedThingOption === \"Historical Locations\") {\n          transformedResults = transformedResults.concat(self.transformLocations(target,response.data.value));\n        } else if (target.type === \"Things\" && target.selectedThingOption === \"Historical Locations with Coordinates\"){\n          // stop here, as we only need 1 value\n          return self.transformLocationsCoordinates(target, response.data.value);\n        } else {\n          transformedResults = transformedResults.concat(self.transformDataSource(target,response.data.value));\n        }\n      }\n\n      thisTargetResult.datapoints = transformedResults;\n\n      return thisTargetResult;\n    });\n\n    return Promise.all(testPromises).then(function (values) {\n      allTargetResults.data = values;\n      return allTargetResults;\n    });\n  }\n\n    transformLocationsCoordinates(target, value) {\n        if (!value) {\n            console.error('Invalid location data for Thing ' + target.selectedThingId);\n            return [];\n        }\n\n        if (Array.isArray(value)) {\n            if (value.length === 0) {\n                console.log('No location for Thing ' + target.selectedThingId);\n                return [];\n            } else {\n                value = value[0];\n            }\n        }\n\n        let locationName = value.Locations[0].name;\n        let location = value.Locations[0].location;\n        let coordinates;\n        if (location.type === 'Feature' && location.geometry.type === 'Point') {\n            coordinates = location.geometry.coordinates;\n        } else if (location.type === 'Point') {\n            coordinates = location.coordinates;\n        } else {\n            console.error('Unsupported location type for Thing ' + target.selectedThingId + '. Expected GeoJSON Feature.Point or Point.');\n            return [];\n        }\n\n        const metricColumn = 1; // this determines the size and color of the circle\n        return {\n          columnMap: {},\n          columns: [\n            {text: \"Time\", type: \"time\"},\n            {text: \"longitude\"},\n            {text: \"latitude\"},\n            {text: \"metric\"},\n            {text: \"name\"}\n          ],\n          meta: {},\n          refId: target.refId,\n          rows: [\n            [value.time, coordinates[0], coordinates[1], metricColumn, target.selectedThingName]\n          ],\n          type: \"table\"\n        }\n    }\n\n    transformDataSource(target, values) {\n        let self = this;\n\n        if (self.isOmObservationType(target.selectedDatastreamObservationType) && _.isEmpty(target.jsonQuery)) {\n            return [];\n        }\n\n        let datapoints = _.map(values, function (value, index) {\n\n            if (self.isOmObservationType(target.selectedDatastreamObservationType)) {\n\n                var result = new JSONPath({ json: value.result, path: target.jsonQuery });\n\n                if (target.panelType === 'table' || target.panelType === 'singlestat') {\n                    result = (typeof result[0] === 'object') ? JSON.stringify(result[0]) : result[0];\n                    return [result, parseInt(moment(value.phenomenonTime, 'YYYY-MM-DDTHH:mm:ss.SSSZ').format('x'))];\n                } else {\n                    return [result[0], parseInt(moment(value.phenomenonTime, 'YYYY-MM-DDTHH:mm:ss.SSSZ').format('x'))];\n                }\n\n            } else {\n\n                if (target.panelType === 'table') {\n                    return [_.isEmpty(value.result.toString()) ? '-' : value.result, parseInt(moment(value.phenomenonTime, 'YYYY-MM-DDTHH:mm:ss.SSSZ').format('x'))];\n                } else {\n                    return [value.result, parseInt(moment(value.phenomenonTime, 'YYYY-MM-DDTHH:mm:ss.SSSZ').format('x'))];\n                }\n\n            }\n        });\n\n        datapoints = _.filter(datapoints, function (datapoint) {\n            return (typeof datapoint[0] === 'string' || typeof datapoint[0] === 'number' || (Number(datapoint[0]) === datapoint[0] && datapoint[0] % 1 !== 0));\n        });\n\n        return datapoints;\n    }\n\n    isOmObservationType(type) {\n        if (_.isEmpty(type)) {\n            return false;\n        }\n\n        if (!type.includes('om_observation')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    transformThings(target, values) {\n\n        return _.map(values, value => {\n            return [_.isEmpty(value.Thing.name) ? '-' : value.Thing.name, parseInt(moment(value.time, 'YYYY-MM-DDTHH:mm:ss.SSSZ').format('x'))];\n        });\n\n    }\n\n    transformLocations(target, values) {\n        let result = [];\n        _.forEach(values, function (value) {\n            _.forEach(value.Locations, function (location) {\n                result.push([_.isEmpty(location.name) ? '-' : location.name, parseInt(moment(value.time, 'YYYY-MM-DDTHH:mm:ss.SSSZ').format('x'))]);\n            });\n        });\n        return result;\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url,\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: 'success', message: 'Data source is working', title: 'Success' };\n            }\n        });\n    }\n\n    async metricFindQuery(query, subUrl, type) {\n\n        let placeholder = 'select a sensor';\n\n        if (type === 'thing') {\n            placeholder = 'select a thing';\n        } else if (type === 'datastream') {\n            placeholder = 'select a datastream';\n        } else if (type === 'location') {\n            placeholder = 'select a location';\n        }\n\n        let transformedMetrics = [{\n            text: placeholder,\n            value: 0,\n            type: ''\n        }];\n\n\n        let hasNextLink = true;\n        let selectParam = (type === 'datastream') ? '$select=name,id,observationType' : '$select=name,id';\n        let fullUrl = this.url + subUrl + `?$top=${this.topCount}&${selectParam}`;\n\n        while (hasNextLink) {\n            let result = await this.doRequest({\n                url: fullUrl,\n                method: 'GET',\n            });\n            hasNextLink = _.has(result.data, '@iot.nextLink');\n            if (hasNextLink) {\n                fullUrl = this.url + subUrl + '?' + result.data['@iot.nextLink'].split('?')[1];\n            }\n            transformedMetrics = transformedMetrics.concat(this.transformMetrics(result.data.value, type));\n        }\n\n        return transformedMetrics;\n    }\n\n    transformMetrics(metrics, type) {\n\n        let transformedMetrics = [];\n\n        _.forEach(metrics, (metric, index) => {\n            transformedMetrics.push({\n                text: metric.name + ' ( ' + metric['@iot.id'] + ' )',\n                value: metric['@iot.id'],\n                type: metric['observationType']\n            });\n        });\n\n        return transformedMetrics;\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n\n    }\n}"]}
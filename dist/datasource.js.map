{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","JSONPath","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","alertSrv","contextSrv","dashboardSrv","type","url","name","q","withCredentials","headers","notificationShowTime","topCount","basicAuth","length","options","key","from","range","utc","format","to","id","Number","isInteger","isNaN","targets","filter","target","hide","allPromises","find","forEach","targetIndex","self","suburl","selectedThingId","timeFilter","getTimeFilter","getFormatedId","push","doRequest","method","then","response","transformLocationsCoordinates","data","value","bind","Promise","all","values","allCoordinates","concat","allTargetResults","testPromises","map","thisTargetResult","selectedDatastreamName","toString","selectedDatastreamDirty","isEqual","selectedLocationId","selectedDatastreamId","transformedResults","hasNextLink","fullUrl","has","split","transformThings","transformLocations","transformDataSource","datapoints","console","error","Array","isArray","log","locationName","Locations","location","coordinates","geometry","selectedThingName","time","isOmObservationType","selectedDatastreamObservationType","isEmpty","jsonQuery","index","result","json","path","panelType","JSON","stringify","parseInt","phenomenonTime","datapoint","includes","Thing","status","message","title","query","placeholder","transformedMetrics","text","selectParam","transformMetrics","metrics","metric","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\nimport {JSONPath} from './external/jsonpath.js'; // copied with grunt\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv,alertSrv, contextSrv, dashboardSrv) {\n\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {'Content-Type': 'application/json'};\n        this.alertSrv = alertSrv;\n        this.contextSrv = contextSrv;\n        this.dashboardSrv = dashboardSrv;\n        this.notificationShowTime = 5000;\n        this.topCount = 1000;\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n    }\n\n    getTimeFilter(options,key){\n        let from = options.range.from.utc().format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n        let to = options.range.to.utc().format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n        return key + \" gt \" + from + \" and \"+ key + \" lt \" + to;\n    }\n\n    getFormatedId(id) {\n        return (Number.isInteger(id) || !isNaN(id)) ? id : \"'\"+id+\"'\";\n    }\n\n    query(options) {\n\n        options.targets = _.filter(options.targets, target => target.hide != true);\n\n        let allPromises = [];\n\n        if (_.find(options.targets, {\"panelType\" : 'grafana-worldmap-panel'})) {\n            _.forEach(options.targets,function(target,targetIndex){\n                let self = this;\n                let suburl = '';\n\n                if (target.selectedThingId == 0) return;\n                let timeFilter = this.getTimeFilter(options,\"time\");\n                suburl = '/Things(' + this.getFormatedId(target.selectedThingId) + ')/HistoricalLocations?'+'$filter='+timeFilter+'&$expand=Locations($select=name,location)&$top=1&$select=time';\n\n                allPromises.push(this.doRequest({\n                    url: this.url + suburl,\n                    method: 'GET'\n                }).then(function(response){\n                    return self.transformLocationsCoordinates(target,targetIndex,response.data.value);\n                }));\n\n            }.bind(this));\n\n            return Promise.all(allPromises).then(function(values) {\n                let allCoordinates = [];\n                _.forEach(values,function(value){\n                    allCoordinates = allCoordinates.concat(value);\n                });\n                return {data: allCoordinates};\n            });\n        }\n\n        let self = this;\n        let allTargetResults = {data:[]};\n\n        let testPromises = options.targets.map(async target => {\n\n          let self = this;\n          let suburl = '';\n          let thisTargetResult = {\n            'target' : target.selectedDatastreamName.toString(),\n            'datapoints' : [],\n          };\n\n          if (target.selectedDatastreamDirty) {\n              return thisTargetResult;\n          }\n\n          if (_.isEqual(target.type,\"Locations\")) {\n              if (target.selectedLocationId == 0) return thisTargetResult;\n              let timeFilter = this.getTimeFilter(options,\"time\");\n              suburl = '/Locations(' + this.getFormatedId(target.selectedLocationId) + ')/HistoricalLocations?'+'$filter='+timeFilter+'&$expand=Things($select=name)&$select=time';\n          } else if(_.isEqual(target.type,\"Historical Locations\")){\n              if (target.selectedThingId == 0) return thisTargetResult;\n              let timeFilter = this.getTimeFilter(options,\"time\");\n              suburl = '/Things(' + this.getFormatedId(target.selectedThingId) + ')/HistoricalLocations?'+'$filter='+timeFilter+'&$expand=Locations($select=name)&$select=time';\n          } else {\n              if (target.selectedDatastreamId == 0) return thisTargetResult;\n              let timeFilter = this.getTimeFilter(options,\"phenomenonTime\");\n              suburl = '/Datastreams('+this.getFormatedId(target.selectedDatastreamId)+')/Observations?'+ `$filter=${timeFilter}&$select=phenomenonTime,result`;\n          }\n\n          let transformedResults = [];\n          let hasNextLink = true;\n          let fullUrl = this.url + suburl + `&$top=${this.topCount}`;\n\n          while(hasNextLink) {\n            let response = await this.doRequest({\n              url: fullUrl,\n              method: 'GET'\n            });\n\n            hasNextLink = _.has(response.data,\"@iot.nextLink\");\n            if (hasNextLink) {\n              suburl = suburl.split('?')[0];\n              fullUrl = this.url + suburl + \"?\" + response.data[\"@iot.nextLink\"].split('?')[1];\n            }\n\n            if (_.isEqual(target.type,\"Locations\")) {\n                transformedResults = transformedResults.concat(self.transformThings(target,response.data.value));\n            } else if(_.isEqual(target.type,\"Historical Locations\")){\n                transformedResults = transformedResults.concat(self.transformLocations(target,response.data.value));\n            } else {\n                transformedResults = transformedResults.concat(self.transformDataSource(target,response.data.value));\n            }\n          }\n\n          thisTargetResult.datapoints = transformedResults\n\n          return thisTargetResult;\n\n        });\n\n        return Promise.all(testPromises).then(function(values) {\n          allTargetResults.data = values;\n          return allTargetResults;\n        });\n\n    }\n\n    transformLocationsCoordinates(target,targetIndex,value){\n        if (!value) {\n          console.error(\"Invalid location data for Thing \"+target.selectedThingId);\n          return [];\n        }\n\n        if (Array.isArray(value)) {\n          if (value.length == 0) {\n            console.log(\"No location for Thing \"+target.selectedThingId);\n            return [];\n          } else {\n            value = value[0];\n          }\n        }\n\n        let locationName = value.Locations[0].name;\n        let location = value.Locations[0].location;\n        let coordinates;\n        if (location.type == \"Feature\" && location.geometry.type == \"Point\"){\n          coordinates = location.geometry.coordinates;\n        } else if (location.type == \"Point\") {\n          coordinates = location.coordinates;\n        } else {\n          console.error(\"Unsupported location type for Thing \"+target.selectedThingId+\". Expected GeoJSON Feature.Point or Point.\")\n          return [];\n        }\n        \n        return [{\n          \"key\": locationName,\n          \"longitude\": coordinates[0], // longitude is the first element\n          \"latitude\": coordinates[1],\n          \"name\": locationName + \" | \" +target.selectedThingName + \" | \" + moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('YYYY-MM-DD HH:mm:ss.SSS'),\n          \"value\": targetIndex+1,\n        }];\n    }\n\n    transformDataSource(target,values){\n        let self = this;\n\n        if (self.isOmObservationType(target.selectedDatastreamObservationType) && _.isEmpty(target.jsonQuery)) {\n          return [];\n        }\n\n        let datapoints = _.map(values,function(value,index){\n\n            if (self.isOmObservationType(target.selectedDatastreamObservationType)) {\n\n                var result = JSONPath({json: value.result, path: target.jsonQuery});\n\n                if (target.panelType == \"table\" || target.panelType == \"singlestat\") {\n                    result = (typeof result[0]===\"object\") ? JSON.stringify(result[0]) : result[0];\n                    return [result,parseInt(moment(value.phenomenonTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n                } else {\n                    return [result[0],parseInt(moment(value.phenomenonTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n                }\n\n            } else {\n\n                if (target.panelType == \"table\") {\n                    return [_.isEmpty(value.result.toString()) ? '-' : value.result ,parseInt(moment(value.phenomenonTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n                } else {\n                    return [value.result,parseInt(moment(value.phenomenonTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n                }\n\n            }\n        });\n\n        datapoints = _.filter(datapoints, function(datapoint) {\n             return (typeof datapoint[0] === \"string\" || typeof datapoint[0] === \"number\" || (Number(datapoint[0]) === datapoint[0] && datapoint[0] % 1 !== 0));\n         });\n\n         return datapoints;\n    }\n\n    isOmObservationType(type) {\n        if (_.isEmpty(type)) {\n            return false;\n        }\n\n        if (!type.includes('om_observation')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    transformThings(target,values){\n\n      return _.map(values,value => {\n          return [_.isEmpty(value.Thing.name) ? '-' : value.Thing.name,parseInt(moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n      })\n\n    }\n\n    transformLocations(target,values) {\n        let result = [];\n        _.forEach(values,function(value) {\n            _.forEach(value.Locations,function(location) {\n                result.push([_.isEmpty(location.name) ? '-' : location.name,parseInt(moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))]);\n            });\n        });\n        return result;\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url,\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    async metricFindQuery(query,suburl,type) {\n\n      let placeholder = \"select a sensor\";\n\n      if (type == \"thing\") {\n          placeholder = \"select a thing\";\n      } else if (type == \"datastream\") {\n          placeholder = \"select a datastream\";\n      } else if (type == \"location\") {\n          placeholder = \"select a location\";\n      }\n\n      let transformedMetrics = [{\n          text: placeholder,\n          value: 0,\n          type: ''\n      }];\n\n\n      let hasNextLink = true;\n      let selectParam = (type == \"datastream\") ? \"$select=name,id,observationType\" : \"$select=name,id\";\n      let fullUrl = this.url + suburl + `?$top=${this.topCount}&${selectParam}`;\n\n      while(hasNextLink) {\n        let result = await this.doRequest({\n            url: fullUrl,\n            method: 'GET',\n        });\n        hasNextLink = _.has(result.data,\"@iot.nextLink\");\n        if (hasNextLink) {\n          fullUrl = this.url + suburl + \"?\" + result.data[\"@iot.nextLink\"].split('?')[1];\n        }\n        transformedMetrics = transformedMetrics.concat(this.transformMetrics(result.data.value,type));\n      }\n\n      return transformedMetrics;\n    }\n\n    transformMetrics(metrics,type) {\n\n        let transformedMetrics = [];\n\n        _.forEach(metrics, (metric,index) => {\n            transformedMetrics.push({\n                text: metric.name + \" ( \" + metric['@iot.id'] + \" )\",\n                value: metric['@iot.id'],\n                type: metric['observationType']\n            });\n        });\n\n        return transformedMetrics;\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n\n    }\n}\n"]}
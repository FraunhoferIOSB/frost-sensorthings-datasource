{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","from","range","format","to","delay","start","Date","getTime","targets","filter","target","hide","allPromises","allTargetResults","data","self","timeFilter","getTimeFilter","forEach","suburl","isEqual","selectedLocationId","selectedThingId","selectedDatastreamId","push","doRequest","method","then","response","transformedResults","transformThings","value","transformLocations","transformDataSource","bind","Promise","all","values","selectedDatastreamName","toString","map","index","result","parseInt","resultTime","selectedLocationName","Thing","time","Locations","location","selectedThingName","status","message","title","query","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","transformMetrics","metrics","placeholder","transformedMetrics","text","metric","datasourceRequest","dsTarget","scopedVars","refId","console","log"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {'Content-Type': 'application/json'};\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n    }\n\n    getTimeFilter(options){\n        let from = options.range.from.format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n        let to = options.range.to.format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n        return \"phenomenonTime gt \" + from + \" and phenomenonTime lt \" + to;\n    }\n\n    sleep(delay) {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay){\n\n        };\n    }\n\n    query(options) {\n        // console.log(options);\n\n        // Filter targets that are set to hidden\n        options.targets = _.filter(options.targets, target => {\n            return target.hide != true;\n        });\n\n        let allPromises = [];\n        let allTargetResults = {data:[]};\n        let self = this;\n        let timeFilter = this.getTimeFilter(options);\n\n        // /Datastreams(16)/Observations?$filter=phenomenonTime%20gt%202018-03-14T16:00:12.749Z%20and%20phenomenonTime%20lt%202018-03-14T17:00:12.749Z&$select=result,phenomenonTime\n\n        _.forEach(options.targets,function(target){\n\n            let self = this;\n\n            let suburl = '';\n\n            if (_.isEqual(target.type,\"Location(HL)\")) {\n                if (target.selectedLocationId == 0) return;\n                suburl = '/Locations(' + target.selectedLocationId + ')/HistoricalLocations?$expand=Things';\n            } else if(_.isEqual(target.type,\"Thing(HL)\")){\n                if (target.selectedThingId == 0) return;\n                suburl = '/Things(' + target.selectedThingId + ')/HistoricalLocations?$expand=Locations';\n            } else {\n                if (target.selectedDatastreamId == 0) return;\n                suburl = '/Datastreams('+target.selectedDatastreamId+')/Observations?'+'$filter='+timeFilter;\n            }\n\n            allPromises.push(this.doRequest({\n                url: this.url + suburl,\n                method: 'GET'\n            }).then(function(response){\n                let transformedResults = [];\n                if (_.isEqual(target.type,\"Location(HL)\")) {\n                    transformedResults = self.transformThings(target,response.data.value);\n                } else if(_.isEqual(target.type,\"Thing(HL)\")){\n                    transformedResults = self.transformLocations(target,response.data.value);\n                } else {\n                    transformedResults = self.transformDataSource(target,response.data.value);\n                }\n                return transformedResults;\n            }));\n\n        }.bind(this));\n\n        return Promise.all(allPromises).then(function(values) {\n            _.forEach(values,function(value){\n                allTargetResults.data.push(value);\n            });\n            return allTargetResults;\n        });\n    }\n\n    transformDataSource(target,values){\n        return {\n            'target' : target.selectedDatastreamName.toString(),\n            'datapoints' : _.map(values,function(value,index){\n                return [value.result,parseInt(moment(value.resultTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n            })\n        };\n    }\n\n    transformThings(target,values){\n        return {\n            'target' : target.selectedLocationName.toString(),\n            'datapoints' : _.map(values,function(value,index){\n                return [value.Thing.name,parseInt(moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n            })\n        };\n    }\n\n    transformLocations(target,values) {\n        let result = [];\n        _.forEach(values,function(value) {\n            _.forEach(value.Locations,function(location) {\n                result.push([location.name,parseInt(moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))]);\n            });\n        });\n        return {\n            'target' : target.selectedThingName.toString(),\n            'datapoints' : result\n        };\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url,\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n\n        return this.doRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    metricFindQuery(query,suburl,type) {\n        return this.doRequest({\n            url: this.url + suburl,\n            method: 'GET',\n        }).then((result) => {\n            return this.transformMetrics(result.data.value,type);\n        });\n    }\n\n    transformMetrics(metrics,type) {\n        let placeholder = \"select a sensor\";\n        if (type == \"thing\") {\n            placeholder = \"select a thing\";\n        } else if (type == \"datastream\") {\n            placeholder = \"select a datastream\";\n        } else if (type == \"location\") {\n            placeholder = \"select a location\";\n        }\n        let transformedMetrics = [{\n            text: placeholder,\n            value: 0\n        }];\n        _.forEach(metrics, (metric,index) => {\n            transformedMetrics.push({\n                text: metric.name + \" ( \" + metric['@iot.id'] + \" )\",\n                value: metric['@iot.id']\n            });\n        });\n        return transformedMetrics;\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.dsTarget !== 'select metric';\n        });\n\n        var targets = _.map(options.targets, target => {\n            return {\n                target: this.templateSrv.replace(target.dsTarget.toString(), options.scopedVars, 'regex') ,\n                refId: target.refId,\n                hide: target.hide,\n                type: target.type || 'timeserie'\n            };\n        });\n\n        options.targets = targets;\n        console.log(options);\n        return options;\n    }\n}\n"]}
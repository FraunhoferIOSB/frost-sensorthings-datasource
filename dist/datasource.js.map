{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","jp","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","alertSrv","contextSrv","dashboardSrv","type","url","name","q","withCredentials","headers","notificationShowTime","basicAuth","length","options","key","from","range","utc","format","to","id","Number","isInteger","isNaN","targets","filter","target","hide","allPromises","find","forEach","targetIndex","self","suburl","selectedThingId","timeFilter","getTimeFilter","getFormatedId","push","doRequest","method","then","response","transformLocationsCoordinates","data","value","bind","Promise","all","values","allCoordinates","concat","allTargetResults","selectedDatastreamDirty","selectedDatastreamName","toString","isEqual","selectedLocationId","selectedDatastreamId","transformedResults","transformThings","transformLocations","transformDataSource","result","timestamp","lastLocation","lastLocationValue","Locations","location","coordinates","selectedThingName","time","transformedObservations","map","index","panelType","isEmpty","parseInt","phenomenonTime","isOmObservationType","selectedDatastreamObservationType","jsonQuery","JSONPath","json","path","includes","selectedLocationName","Thing","status","message","title","query","transformMetrics","metrics","placeholder","transformedMetrics","text","metric","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\nimport * as jp from './libs/jsonpath.js';\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv,alertSrv, contextSrv, dashboardSrv) {\n\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {'Content-Type': 'application/json'};\n        this.alertSrv = alertSrv;\n        this.contextSrv = contextSrv;\n        this.dashboardSrv = dashboardSrv;\n        this.notificationShowTime = 5000;\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n    }\n\n    getTimeFilter(options,key){\n        let from = options.range.from.utc().format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n        let to = options.range.to.utc().format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n        return key + \" gt \" + from + \" and \"+ key + \" lt \" + to;\n    }\n\n    getFormatedId(id) {\n        return (Number.isInteger(id) || !isNaN(id)) ? id : \"'\"+id+\"'\";\n    }\n\n    query(options) {\n        // var cities = [\n        //     { name: \"London\", \"population\": 8615246 },\n        //     { name: \"Berlin\", \"population\": 3517424 },\n        //     { name: \"Madrid\", \"population\": 3165235 },\n        //     { name: \"Rome\",   \"population\": 2870528 }\n        // ];\n        // var names = jsonpath.query(cities, '$..name');\n        //\n        // console.log(names);\n        // Filter targets that are set to hidden\n        options.targets = _.filter(options.targets, target => {\n            return target.hide != true;\n        });\n\n        let allPromises = [];\n\n        if (_.find(options.targets, {\"panelType\" : 'grafana-worldmap-panel'})) {\n            _.forEach(options.targets,function(target,targetIndex){\n                let self = this;\n                let suburl = '';\n\n                if (target.selectedThingId == 0) return;\n                let timeFilter = this.getTimeFilter(options,\"time\");\n                suburl = '/Things(' + this.getFormatedId(target.selectedThingId) + ')/HistoricalLocations?'+'$filter='+timeFilter+'&$expand=Locations';\n\n                allPromises.push(this.doRequest({\n                    url: this.url + suburl,\n                    method: 'GET'\n                }).then(function(response){\n                    return self.transformLocationsCoordinates(target,targetIndex,response.data.value);\n                }));\n\n            }.bind(this));\n\n            return Promise.all(allPromises).then(function(values) {\n                let allCoordinates = [];\n                _.forEach(values,function(value){\n                    allCoordinates = allCoordinates.concat(value);\n                });\n                return {data: allCoordinates};\n            });\n        }\n\n        let self = this;\n        let allTargetResults = {data:[]};\n\n        _.forEach(options.targets,function(target){\n            let self = this;\n            let suburl = '';\n            if (target.selectedDatastreamDirty) {\n                allTargetResults.data.push({\n                    'target' : target.selectedDatastreamName.toString(),\n                    'datapoints' : [],\n                });\n                return;\n            }\n\n            if (_.isEqual(target.type,\"Locations\")) {\n                if (target.selectedLocationId == 0) return;\n                let timeFilter = this.getTimeFilter(options,\"time\");\n                suburl = '/Locations(' + this.getFormatedId(target.selectedLocationId) + ')/HistoricalLocations?'+'$filter='+timeFilter+'&$expand=Things';\n            } else if(_.isEqual(target.type,\"Historical Locations\")){\n                if (target.selectedThingId == 0) return;\n                let timeFilter = this.getTimeFilter(options,\"time\");\n                suburl = '/Things(' + this.getFormatedId(target.selectedThingId) + ')/HistoricalLocations?'+'$filter='+timeFilter+'&$expand=Locations';\n            } else {\n                if (target.selectedDatastreamId == 0) return;\n                let timeFilter = this.getTimeFilter(options,\"phenomenonTime\");\n                suburl = '/Datastreams('+this.getFormatedId(target.selectedDatastreamId)+')/Observations?'+'$filter='+timeFilter;\n            }\n\n            allPromises.push(this.doRequest({\n                url: this.url + suburl,\n                method: 'GET'\n            }).then(function(response){\n                let transformedResults = [];\n                if (_.isEqual(target.type,\"Locations\")) {\n                    transformedResults = self.transformThings(target,response.data.value);\n                } else if(_.isEqual(target.type,\"Historical Locations\")){\n                    transformedResults = self.transformLocations(target,response.data.value);\n                } else {\n                    transformedResults = self.transformDataSource(target,response.data.value);\n                }\n                return transformedResults;\n            }));\n\n        }.bind(this));\n\n        return Promise.all(allPromises).then(function(values) {\n            _.forEach(values,function(value){\n                allTargetResults.data.push(value);\n            });\n            return allTargetResults;\n        });\n    }\n\n    transformLocationsCoordinates(target,targetIndex,values){\n        let result = [];\n        let timestamp = \"\";\n        let lastLocation = false;\n        let lastLocationValue = \"\";\n        if (values && values.length > 0) {\n            let lastLocation = values[0].Locations[0];\n            result.push({\n                \"key\": lastLocation.name,\n                \"latitude\": lastLocation.location.coordinates[0],\n                \"longitude\": lastLocation.location.coordinates[1],\n                \"name\": lastLocation.name + \" | \" +target.selectedThingName + \" | \" + moment(values[0].time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('YYYY-MM-DD HH:mm:ss.SSS'),\n                \"value\": targetIndex+1,\n            });\n        }\n        return result;\n    }\n\n    transformDataSource(target,values){\n        let self = this;\n        let transformedObservations = {\n            'target' : target.selectedDatastreamName.toString(),\n            'datapoints' : _.map(values,function(value,index){\n                if (target.panelType == \"table\") {\n                    return [_.isEmpty(value.result.toString()) ? '-' : value.result ,parseInt(moment(value.phenomenonTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n                }\n\n                if (self.isOmObservationType(target.selectedDatastreamObservationType)) {\n                    if (_.isEmpty(target.jsonQuery)) {\n                        return [0.0,parseInt(moment(value.phenomenonTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n                    }\n                    var result = JSONPath({json: value.result, path: target.jsonQuery});\n                    return [result[0],parseInt(moment(value.phenomenonTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n                }\n\n                // graph panel type expects the value in float/double/int and not as strings\n                return [value.result,parseInt(moment(value.phenomenonTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n            })\n        };\n\n        return transformedObservations;\n    }\n\n    isOmObservationType(type) {\n        if (_.isEmpty(type)) {\n            return false;\n        }\n\n        if (!type.includes('om_observation')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    transformThings(target,values){\n        return {\n            'target' : target.selectedLocationName.toString(),\n            'datapoints' : _.map(values,function(value,index){\n                return [_.isEmpty(value.Thing.name) ? '-' : value.Thing.name,parseInt(moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n            })\n        };\n    }\n\n    transformLocations(target,values) {\n        let result = [];\n        _.forEach(values,function(value) {\n            _.forEach(value.Locations,function(location) {\n                result.push([_.isEmpty(location.name) ? '-' : location.name,parseInt(moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))]);\n            });\n        });\n        return {\n            'target' : target.selectedThingName.toString(),\n            'datapoints' : result\n        };\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url,\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    metricFindQuery(query,suburl,type) {\n        return this.doRequest({\n            url: this.url + suburl,\n            method: 'GET',\n        }).then((result) => {\n            return this.transformMetrics(result.data.value,type);\n        });\n    }\n\n    transformMetrics(metrics,type) {\n        let placeholder = \"select a sensor\";\n        if (type == \"thing\") {\n            placeholder = \"select a thing\";\n        } else if (type == \"datastream\") {\n            placeholder = \"select a datastream\";\n        } else if (type == \"location\") {\n            placeholder = \"select a location\";\n        }\n        let transformedMetrics = [{\n            text: placeholder,\n            value: 0,\n            type: ''\n        }];\n        _.forEach(metrics, (metric,index) => {\n            transformedMetrics.push({\n                text: metric.name + \" ( \" + metric['@iot.id'] + \" )\",\n                value: metric['@iot.id'],\n                type: metric['observationType']\n            });\n        });\n        return transformedMetrics;\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n\n    }\n}\n"]}
{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","from","range","format","to","delay","start","Date","getTime","allPromises","allTargetResults","data","self","timeFilter","getTimeFilter","forEach","targets","target","push","doRequest","datastreamID","method","then","response","filtered","map","value","index","result","resultTime","toString","bind","Promise","all","values","status","message","title","query","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","suburl","mapToTextValue","text","id","datasourceRequest","filter","scopedVars","refId","hide"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  getTimeFilter(options){\n    let from = options.range.from.format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n    let to = options.range.to.format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n    return \"phenomenonTime gt \" + from + \" and phenomenonTime lt \" + to;\n  }\n  sleep(delay) {\n    var start = new Date().getTime();\n    while (new Date().getTime() < start + delay){\n\n    };\n  }\n  query(options) {\n    let allPromises = [];\n    let allTargetResults = {data:[]};\n    let self = this;\n    let timeFilter = this.getTimeFilter(options);\n\n    // /Datastreams(16)/Observations?$filter=phenomenonTime%20gt%202018-03-14T16:00:12.749Z%20and%20phenomenonTime%20lt%202018-03-14T17:00:12.749Z&$select=result,phenomenonTime\n\n    _.forEach(options.targets,function(target){\n      allPromises.push(this.doRequest({\n        url: this.url + '/Datastreams('+target.datastreamID+')/Observations?'+'$filter='+timeFilter,\n        // data: query,\n        method: 'GET'\n      }).then(function(response){\n        let filtered = _.map(response.data.value,function(value,index){\n          return [value.result,moment(value.resultTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x')];\n        });\n        return {\n          'target' : target.target.toString(),\n          'datapoints' : filtered\n        };\n      }));\n\n    }.bind(this));\n\n    return Promise.all(allPromises).then(function(values) {\n      _.forEach(values,function(value){\n        allTargetResults.data.push(value);\n      });\n      return allTargetResults;\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query,suburl) {\n    // var interpolated = {\n    //     target: this.templateSrv.replace(query, null, 'regex')\n    // };\n\n    return this.doRequest({\n      url: this.url + suburl,\n      // data: interpolated,\n      method: 'GET',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data.value, (data,index) => {\n      return {\n        text: data.name + \" ( \" + data['@iot.id'] + \" )\",\n        value: data.name + \" ( \" + data['@iot.id'] + \" )\",\n        id: data['@iot.id']\n      };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target.toString(), options.scopedVars, 'regex') ,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n}\n"]}
{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","key","from","range","format","to","delay","start","Date","getTime","console","log","demo","targets","filter","target","hide","allPromises","allTargetResults","data","self","forEach","suburl","isEqual","selectedLocationId","timeFilter","getTimeFilter","selectedThingId","selectedDatastreamId","push","doRequest","method","then","response","transformedResults","transformThings","value","transformLocations","transformDataSource","bind","Promise","all","values","selectedDatastreamName","toString","map","index","panelType","isEmpty","result","parseInt","resultTime","selectedLocationName","Thing","time","Locations","location","selectedThingName","status","message","title","query","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","transformMetrics","metrics","placeholder","transformedMetrics","text","metric","datasourceRequest","dsTarget","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = {'Content-Type': 'application/json'};\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n    }\n\n    getTimeFilter(options,key){\n        let from = options.range.from.format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n        let to = options.range.to.format(\"YYYY-MM-DDTHH:mm:ss.SSS\")+\"Z\";\n        return key + \" gt \" + from + \" and \"+ key + \" lt \" + to;\n    }\n\n    sleep(delay) {\n        var start = new Date().getTime();\n        while (new Date().getTime() < start + delay){\n\n        };\n    }\n\n    query(options) {\n        console.log(options);\n\n        let demo = [ { \"key\": \"fraunhofer cafeteria\", \"latitude\": 50.7495107, \"longitude\": 7.1948428, \"name\": \"fraunhofer cafeteria\" }, { \"key\": \"charleroi\", \"latitude\": 50.4108, \"longitude\": 4.4446, \"name\": \"Charleroi\"}, { \"key\": \"frankfurt\", \"latitude\": 50.110924, \"longitude\": 8.682127, \"name\": \"Frankfurt\", }, { \"key\": \"london\", \"latitude\": 51.503399, \"longitude\": -0.119519, \"name\": \"London\", }, { \"key\": \"paris\", \"latitude\": 48.864716, \"longitude\": 2.349014, \"name\": \"Paris\" } ];\n\n        console.log(demo);\n        // console.log(options);\n\n        // Filter targets that are set to hidden\n        options.targets = _.filter(options.targets, target => {\n            return target.hide != true;\n        });\n\n        let allPromises = [];\n        let allTargetResults = {data:demo};\n        // allTargetResults.data =\n        return allTargetResults;\n        let self = this;\n\n        // /Datastreams(16)/Observations?$filter=phenomenonTime%20gt%202018-03-14T16:00:12.749Z%20and%20phenomenonTime%20lt%202018-03-14T17:00:12.749Z&$select=result,phenomenonTime\n\n        _.forEach(options.targets,function(target){\n            let self = this;\n            let suburl = '';\n\n            if (_.isEqual(target.type,\"Location(HL)\")) {\n                if (target.selectedLocationId == 0) return;\n                let timeFilter = this.getTimeFilter(options,\"time\");\n                suburl = '/Locations(' + target.selectedLocationId + ')/HistoricalLocations?'+'$filter='+timeFilter+'&$expand=Things';\n            } else if(_.isEqual(target.type,\"Thing(HL)\")){\n                if (target.selectedThingId == 0) return;\n                let timeFilter = this.getTimeFilter(options,\"time\");\n                suburl = '/Things(' + target.selectedThingId + ')/HistoricalLocations?'+'$filter='+timeFilter+'&$expand=Locations';\n            } else {\n                if (target.selectedDatastreamId == 0) return;\n                let timeFilter = this.getTimeFilter(options,\"phenomenonTime\");\n                suburl = '/Datastreams('+target.selectedDatastreamId+')/Observations?'+'$filter='+timeFilter;\n            }\n\n            allPromises.push(this.doRequest({\n                url: this.url + suburl,\n                method: 'GET'\n            }).then(function(response){\n                let transformedResults = [];\n                if (_.isEqual(target.type,\"Location(HL)\")) {\n                    transformedResults = self.transformThings(target,response.data.value);\n                } else if(_.isEqual(target.type,\"Thing(HL)\")){\n                    transformedResults = self.transformLocations(target,response.data.value);\n                } else {\n                    transformedResults = self.transformDataSource(target,response.data.value);\n                }\n                return transformedResults;\n            }));\n\n        }.bind(this));\n\n        return Promise.all(allPromises).then(function(values) {\n            _.forEach(values,function(value){\n                allTargetResults.data.push(value);\n            });\n            return allTargetResults;\n        });\n    }\n\n    transformDataSource(target,values){\n        return {\n            'target' : target.selectedDatastreamName.toString(),\n            'datapoints' : _.map(values,function(value,index){\n                if (target.panelType == \"table\") {\n                    return [_.isEmpty(value.result.toString()) ? '-' : value.result ,parseInt(moment(value.resultTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n                }\n                // graph panel type expects the value in float/double/int and not as strings\n                return [value.result,parseInt(moment(value.resultTime,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n            })\n        };\n    }\n\n    transformThings(target,values){\n        return {\n            'target' : target.selectedLocationName.toString(),\n            'datapoints' : _.map(values,function(value,index){\n                return [_.isEmpty(value.Thing.name) ? '-' : value.Thing.name,parseInt(moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))];\n            })\n        };\n    }\n\n    transformLocations(target,values) {\n        let result = [];\n        _.forEach(values,function(value) {\n            _.forEach(value.Locations,function(location) {\n                result.push([_.isEmpty(location.name) ? '-' : location.name,parseInt(moment(value.time,\"YYYY-MM-DDTHH:mm:ss.SSSZ\").format('x'))]);\n            });\n        });\n        return {\n            'target' : target.selectedThingName.toString(),\n            'datapoints' : result\n        };\n    }\n\n    testDatasource() {\n        return this.doRequest({\n            url: this.url,\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n\n        return this.doRequest({\n            url: this.url + '/annotations',\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    metricFindQuery(query,suburl,type) {\n        return this.doRequest({\n            url: this.url + suburl,\n            method: 'GET',\n        }).then((result) => {\n            return this.transformMetrics(result.data.value,type);\n        });\n    }\n\n    transformMetrics(metrics,type) {\n        let placeholder = \"select a sensor\";\n        if (type == \"thing\") {\n            placeholder = \"select a thing\";\n        } else if (type == \"datastream\") {\n            placeholder = \"select a datastream\";\n        } else if (type == \"location\") {\n            placeholder = \"select a location\";\n        }\n        let transformedMetrics = [{\n            text: placeholder,\n            value: 0\n        }];\n        _.forEach(metrics, (metric,index) => {\n            transformedMetrics.push({\n                text: metric.name + \" ( \" + metric['@iot.id'] + \" )\",\n                value: metric['@iot.id']\n            });\n        });\n        return transformedMetrics;\n    }\n\n    doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n\n    }\n\n    buildQueryParameters(options) {\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.dsTarget !== 'select metric';\n        });\n\n        var targets = _.map(options.targets, target => {\n            return {\n                target: this.templateSrv.replace(target.dsTarget.toString(), options.scopedVars, 'regex') ,\n                refId: target.refId,\n                hide: target.hide,\n                type: target.type || 'timeserie'\n            };\n        });\n\n        options.targets = targets;\n        console.log(options);\n        return options;\n    }\n}\n"]}